<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1686" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1669.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1669.00"> </text><svg id="frames" x="10" width="1180" total_samples="395"><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="0.0000%" y="997" width="0.2532%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="0.5063%" y="917" width="0.2532%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.7563%" y="927.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="0.5063%" y="901" width="0.2532%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.7563%" y="911.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="0.5063%" y="885" width="0.2532%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.7563%" y="895.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="0.7595%" y="885" width="0.2532%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="1.0095%" y="895.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="1.0127%" y="869" width="0.2532%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="1.2627%" y="879.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="1.0127%" y="853" width="0.2532%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="1.2627%" y="863.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="1.0127%" y="837" width="0.2532%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="1.2627%" y="847.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="1.2658%" y="869" width="0.2532%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="1.5158%" y="879.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="1.7722%" y="853" width="0.2532%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="2.0222%" y="863.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="4.0506%" y="805" width="0.5063%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="2"/><text x="4.3006%" y="815.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="4.5570%" y="805" width="0.2532%" height="15" fill="rgb(240,193,28)" fg:x="18" fg:w="1"/><text x="4.8070%" y="815.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="4.5570%" y="789" width="0.2532%" height="15" fill="rgb(216,20,37)" fg:x="18" fg:w="1"/><text x="4.8070%" y="799.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="4.5570%" y="773" width="0.2532%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="1"/><text x="4.8070%" y="783.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.76%)</title><rect x="5.0633%" y="789" width="0.7595%" height="15" fill="rgb(217,207,13)" fg:x="20" fg:w="3"/><text x="5.3133%" y="799.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.25%)</title><rect x="5.8228%" y="789" width="0.2532%" height="15" fill="rgb(231,73,38)" fg:x="23" fg:w="1"/><text x="6.0728%" y="799.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="7.5949%" y="773" width="0.5063%" height="15" fill="rgb(225,20,46)" fg:x="30" fg:w="2"/><text x="7.8449%" y="783.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="8.8608%" y="757" width="0.2532%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="1"/><text x="9.1108%" y="767.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="9.8734%" y="741" width="0.5063%" height="15" fill="rgb(221,200,47)" fg:x="39" fg:w="2"/><text x="10.1234%" y="751.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="11.1392%" y="725" width="0.2532%" height="15" fill="rgb(226,26,5)" fg:x="44" fg:w="1"/><text x="11.3892%" y="735.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="11.3924%" y="725" width="0.2532%" height="15" fill="rgb(249,33,26)" fg:x="45" fg:w="1"/><text x="11.6424%" y="735.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="11.3924%" y="709" width="0.2532%" height="15" fill="rgb(235,183,28)" fg:x="45" fg:w="1"/><text x="11.6424%" y="719.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="11.3924%" y="693" width="0.2532%" height="15" fill="rgb(221,5,38)" fg:x="45" fg:w="1"/><text x="11.6424%" y="703.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="12.4051%" y="709" width="0.5063%" height="15" fill="rgb(247,18,42)" fg:x="49" fg:w="2"/><text x="12.6551%" y="719.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.76%)</title><rect x="12.9114%" y="709" width="0.7595%" height="15" fill="rgb(241,131,45)" fg:x="51" fg:w="3"/><text x="13.1614%" y="719.50"></text></g><g><title>rust-test`_mi_malloc_generic (3 samples, 0.76%)</title><rect x="12.9114%" y="693" width="0.7595%" height="15" fill="rgb(249,31,29)" fg:x="51" fg:w="3"/><text x="13.1614%" y="703.50"></text></g><g><title>rust-test`mi_page_free_list_extend (3 samples, 0.76%)</title><rect x="12.9114%" y="677" width="0.7595%" height="15" fill="rgb(225,111,53)" fg:x="51" fg:w="3"/><text x="13.1614%" y="687.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="13.6709%" y="709" width="0.2532%" height="15" fill="rgb(238,160,17)" fg:x="54" fg:w="1"/><text x="13.9209%" y="719.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="15.4430%" y="677" width="0.5063%" height="15" fill="rgb(214,148,48)" fg:x="61" fg:w="2"/><text x="15.6930%" y="687.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="15.9494%" y="677" width="0.2532%" height="15" fill="rgb(232,36,49)" fg:x="63" fg:w="1"/><text x="16.1994%" y="687.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="15.9494%" y="661" width="0.2532%" height="15" fill="rgb(209,103,24)" fg:x="63" fg:w="1"/><text x="16.1994%" y="671.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="15.9494%" y="645" width="0.2532%" height="15" fill="rgb(229,88,8)" fg:x="63" fg:w="1"/><text x="16.1994%" y="655.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="17.7215%" y="661" width="0.2532%" height="15" fill="rgb(213,181,19)" fg:x="70" fg:w="1"/><text x="17.9715%" y="671.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="17.9747%" y="629" width="0.2532%" height="15" fill="rgb(254,191,54)" fg:x="71" fg:w="1"/><text x="18.2247%" y="639.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="17.9747%" y="613" width="0.2532%" height="15" fill="rgb(241,83,37)" fg:x="71" fg:w="1"/><text x="18.2247%" y="623.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.51%)</title><rect x="17.9747%" y="661" width="0.5063%" height="15" fill="rgb(233,36,39)" fg:x="71" fg:w="2"/><text x="18.2247%" y="671.50"></text></g><g><title>rust-test`_mi_malloc_generic (2 samples, 0.51%)</title><rect x="17.9747%" y="645" width="0.5063%" height="15" fill="rgb(226,3,54)" fg:x="71" fg:w="2"/><text x="18.2247%" y="655.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="18.2278%" y="629" width="0.2532%" height="15" fill="rgb(245,192,40)" fg:x="72" fg:w="1"/><text x="18.4778%" y="639.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.25%)</title><rect x="19.7468%" y="645" width="0.2532%" height="15" fill="rgb(238,167,29)" fg:x="78" fg:w="1"/><text x="19.9968%" y="655.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="20.0000%" y="645" width="0.5063%" height="15" fill="rgb(232,182,51)" fg:x="79" fg:w="2"/><text x="20.2500%" y="655.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.25%)</title><rect x="20.5063%" y="645" width="0.2532%" height="15" fill="rgb(231,60,39)" fg:x="81" fg:w="1"/><text x="20.7563%" y="655.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="20.7595%" y="645" width="0.2532%" height="15" fill="rgb(208,69,12)" fg:x="82" fg:w="1"/><text x="21.0095%" y="655.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="20.7595%" y="629" width="0.2532%" height="15" fill="rgb(235,93,37)" fg:x="82" fg:w="1"/><text x="21.0095%" y="639.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="22.5316%" y="629" width="0.5063%" height="15" fill="rgb(213,116,39)" fg:x="89" fg:w="2"/><text x="22.7816%" y="639.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.25%)</title><rect x="23.0380%" y="629" width="0.2532%" height="15" fill="rgb(222,207,29)" fg:x="91" fg:w="1"/><text x="23.2880%" y="639.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="23.2911%" y="597" width="0.2532%" height="15" fill="rgb(206,96,30)" fg:x="92" fg:w="1"/><text x="23.5411%" y="607.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="23.2911%" y="581" width="0.2532%" height="15" fill="rgb(218,138,4)" fg:x="92" fg:w="1"/><text x="23.5411%" y="591.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.51%)</title><rect x="23.2911%" y="629" width="0.5063%" height="15" fill="rgb(250,191,14)" fg:x="92" fg:w="2"/><text x="23.5411%" y="639.50"></text></g><g><title>rust-test`_mi_malloc_generic (2 samples, 0.51%)</title><rect x="23.2911%" y="613" width="0.5063%" height="15" fill="rgb(239,60,40)" fg:x="92" fg:w="2"/><text x="23.5411%" y="623.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="23.5443%" y="597" width="0.2532%" height="15" fill="rgb(206,27,48)" fg:x="93" fg:w="1"/><text x="23.7943%" y="607.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="25.8228%" y="613" width="0.2532%" height="15" fill="rgb(225,35,8)" fg:x="102" fg:w="1"/><text x="26.0728%" y="623.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="26.0759%" y="613" width="0.2532%" height="15" fill="rgb(250,213,24)" fg:x="103" fg:w="1"/><text x="26.3259%" y="623.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="26.3291%" y="613" width="0.2532%" height="15" fill="rgb(247,123,22)" fg:x="104" fg:w="1"/><text x="26.5791%" y="623.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="26.3291%" y="597" width="0.2532%" height="15" fill="rgb(231,138,38)" fg:x="104" fg:w="1"/><text x="26.5791%" y="607.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="26.3291%" y="581" width="0.2532%" height="15" fill="rgb(231,145,46)" fg:x="104" fg:w="1"/><text x="26.5791%" y="591.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="26.3291%" y="565" width="0.2532%" height="15" fill="rgb(251,118,11)" fg:x="104" fg:w="1"/><text x="26.5791%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.25%)</title><rect x="27.3418%" y="597" width="0.2532%" height="15" fill="rgb(217,147,25)" fg:x="108" fg:w="1"/><text x="27.5918%" y="607.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="27.5949%" y="597" width="0.2532%" height="15" fill="rgb(247,81,37)" fg:x="109" fg:w="1"/><text x="27.8449%" y="607.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.51%)</title><rect x="27.8481%" y="597" width="0.5063%" height="15" fill="rgb(209,12,38)" fg:x="110" fg:w="2"/><text x="28.0981%" y="607.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.51%)</title><rect x="28.3544%" y="597" width="0.5063%" height="15" fill="rgb(227,1,9)" fg:x="112" fg:w="2"/><text x="28.6044%" y="607.50"></text></g><g><title>rust-test`_mi_malloc_generic (2 samples, 0.51%)</title><rect x="28.3544%" y="581" width="0.5063%" height="15" fill="rgb(248,47,43)" fg:x="112" fg:w="2"/><text x="28.6044%" y="591.50"></text></g><g><title>rust-test`mi_find_page (2 samples, 0.51%)</title><rect x="28.3544%" y="565" width="0.5063%" height="15" fill="rgb(221,10,30)" fg:x="112" fg:w="2"/><text x="28.6044%" y="575.50"></text></g><g><title>rust-test`mi_page_free_list_extend (2 samples, 0.51%)</title><rect x="28.3544%" y="549" width="0.5063%" height="15" fill="rgb(210,229,1)" fg:x="112" fg:w="2"/><text x="28.6044%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.25%)</title><rect x="30.6329%" y="581" width="0.2532%" height="15" fill="rgb(222,148,37)" fg:x="121" fg:w="1"/><text x="30.8829%" y="591.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="30.8861%" y="581" width="0.2532%" height="15" fill="rgb(234,67,33)" fg:x="122" fg:w="1"/><text x="31.1361%" y="591.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.76%)</title><rect x="31.1392%" y="581" width="0.7595%" height="15" fill="rgb(247,98,35)" fg:x="123" fg:w="3"/><text x="31.3892%" y="591.50"></text></g><g><title>rust-test`_mi_malloc_generic (3 samples, 0.76%)</title><rect x="31.1392%" y="565" width="0.7595%" height="15" fill="rgb(247,138,52)" fg:x="123" fg:w="3"/><text x="31.3892%" y="575.50"></text></g><g><title>rust-test`mi_page_free_list_extend (3 samples, 0.76%)</title><rect x="31.1392%" y="549" width="0.7595%" height="15" fill="rgb(213,79,30)" fg:x="123" fg:w="3"/><text x="31.3892%" y="559.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.25%)</title><rect x="33.1646%" y="565" width="0.2532%" height="15" fill="rgb(246,177,23)" fg:x="131" fg:w="1"/><text x="33.4146%" y="575.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.76%)</title><rect x="33.4177%" y="565" width="0.7595%" height="15" fill="rgb(230,62,27)" fg:x="132" fg:w="3"/><text x="33.6677%" y="575.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.76%)</title><rect x="34.1772%" y="565" width="0.7595%" height="15" fill="rgb(216,154,8)" fg:x="135" fg:w="3"/><text x="34.4272%" y="575.50"></text></g><g><title>rust-test`_mi_malloc_generic (3 samples, 0.76%)</title><rect x="34.1772%" y="549" width="0.7595%" height="15" fill="rgb(244,35,45)" fg:x="135" fg:w="3"/><text x="34.4272%" y="559.50"></text></g><g><title>rust-test`mi_page_free_list_extend (3 samples, 0.76%)</title><rect x="34.1772%" y="533" width="0.7595%" height="15" fill="rgb(251,115,12)" fg:x="135" fg:w="3"/><text x="34.4272%" y="543.50"></text></g><g><title>rust-test`mi_malloc_aligned (2 samples, 0.51%)</title><rect x="34.9367%" y="565" width="0.5063%" height="15" fill="rgb(240,54,50)" fg:x="138" fg:w="2"/><text x="35.1867%" y="575.50"></text></g><g><title>libdyld.dylib`_tlv_get_addr (1 samples, 0.25%)</title><rect x="37.2152%" y="549" width="0.2532%" height="15" fill="rgb(233,84,52)" fg:x="147" fg:w="1"/><text x="37.4652%" y="559.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="37.4684%" y="549" width="0.5063%" height="15" fill="rgb(207,117,47)" fg:x="148" fg:w="2"/><text x="37.7184%" y="559.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.25%)</title><rect x="37.9747%" y="549" width="0.2532%" height="15" fill="rgb(249,43,39)" fg:x="150" fg:w="1"/><text x="38.2247%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.25%)</title><rect x="40.2532%" y="533" width="0.2532%" height="15" fill="rgb(209,38,44)" fg:x="159" fg:w="1"/><text x="40.5032%" y="543.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 1.01%)</title><rect x="40.5063%" y="533" width="1.0127%" height="15" fill="rgb(236,212,23)" fg:x="160" fg:w="4"/><text x="40.7563%" y="543.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="41.5190%" y="501" width="0.2532%" height="15" fill="rgb(242,79,21)" fg:x="164" fg:w="1"/><text x="41.7690%" y="511.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="41.5190%" y="485" width="0.2532%" height="15" fill="rgb(211,96,35)" fg:x="164" fg:w="1"/><text x="41.7690%" y="495.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.76%)</title><rect x="41.5190%" y="533" width="0.7595%" height="15" fill="rgb(253,215,40)" fg:x="164" fg:w="3"/><text x="41.7690%" y="543.50"></text></g><g><title>rust-test`_mi_malloc_generic (3 samples, 0.76%)</title><rect x="41.5190%" y="517" width="0.7595%" height="15" fill="rgb(211,81,21)" fg:x="164" fg:w="3"/><text x="41.7690%" y="527.50"></text></g><g><title>rust-test`mi_page_free_list_extend (2 samples, 0.51%)</title><rect x="41.7722%" y="501" width="0.5063%" height="15" fill="rgb(208,190,38)" fg:x="165" fg:w="2"/><text x="42.0222%" y="511.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 1.27%)</title><rect x="44.5570%" y="517" width="1.2658%" height="15" fill="rgb(235,213,38)" fg:x="176" fg:w="5"/><text x="44.8070%" y="527.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="45.8228%" y="469" width="0.2532%" height="15" fill="rgb(237,122,38)" fg:x="181" fg:w="1"/><text x="46.0728%" y="479.50"></text></g><g><title>rust-test`mi_find_page (2 samples, 0.51%)</title><rect x="45.8228%" y="485" width="0.5063%" height="15" fill="rgb(244,218,35)" fg:x="181" fg:w="2"/><text x="46.0728%" y="495.50"></text></g><g><title>rust-test`mi_page_fresh_alloc (1 samples, 0.25%)</title><rect x="46.0759%" y="469" width="0.2532%" height="15" fill="rgb(240,68,47)" fg:x="182" fg:w="1"/><text x="46.3259%" y="479.50"></text></g><g><title>rust-test`mi_segments_page_alloc (1 samples, 0.25%)</title><rect x="46.0759%" y="453" width="0.2532%" height="15" fill="rgb(210,16,53)" fg:x="182" fg:w="1"/><text x="46.3259%" y="463.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.76%)</title><rect x="45.8228%" y="517" width="0.7595%" height="15" fill="rgb(235,124,12)" fg:x="181" fg:w="3"/><text x="46.0728%" y="527.50"></text></g><g><title>rust-test`_mi_malloc_generic (3 samples, 0.76%)</title><rect x="45.8228%" y="501" width="0.7595%" height="15" fill="rgb(224,169,11)" fg:x="181" fg:w="3"/><text x="46.0728%" y="511.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="46.3291%" y="485" width="0.2532%" height="15" fill="rgb(250,166,2)" fg:x="183" fg:w="1"/><text x="46.5791%" y="495.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="47.5949%" y="501" width="0.2532%" height="15" fill="rgb(242,216,29)" fg:x="188" fg:w="1"/><text x="47.8449%" y="511.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="47.8481%" y="501" width="0.2532%" height="15" fill="rgb(230,116,27)" fg:x="189" fg:w="1"/><text x="48.0981%" y="511.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="47.8481%" y="485" width="0.2532%" height="15" fill="rgb(228,99,48)" fg:x="189" fg:w="1"/><text x="48.0981%" y="495.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="47.8481%" y="469" width="0.2532%" height="15" fill="rgb(253,11,6)" fg:x="189" fg:w="1"/><text x="48.0981%" y="479.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="48.1013%" y="501" width="0.2532%" height="15" fill="rgb(247,143,39)" fg:x="190" fg:w="1"/><text x="48.3513%" y="511.50"></text></g><g><title>libdyld.dylib`_tlv_get_addr (1 samples, 0.25%)</title><rect x="50.8861%" y="485" width="0.2532%" height="15" fill="rgb(236,97,10)" fg:x="201" fg:w="1"/><text x="51.1361%" y="495.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="51.1392%" y="453" width="0.2532%" height="15" fill="rgb(233,208,19)" fg:x="202" fg:w="1"/><text x="51.3892%" y="463.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="51.1392%" y="437" width="0.2532%" height="15" fill="rgb(216,164,2)" fg:x="202" fg:w="1"/><text x="51.3892%" y="447.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.76%)</title><rect x="51.1392%" y="485" width="0.7595%" height="15" fill="rgb(220,129,5)" fg:x="202" fg:w="3"/><text x="51.3892%" y="495.50"></text></g><g><title>rust-test`_mi_malloc_generic (3 samples, 0.76%)</title><rect x="51.1392%" y="469" width="0.7595%" height="15" fill="rgb(242,17,10)" fg:x="202" fg:w="3"/><text x="51.3892%" y="479.50"></text></g><g><title>rust-test`mi_page_free_list_extend (2 samples, 0.51%)</title><rect x="51.3924%" y="453" width="0.5063%" height="15" fill="rgb(242,107,0)" fg:x="203" fg:w="2"/><text x="51.6424%" y="463.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="53.6709%" y="469" width="0.5063%" height="15" fill="rgb(251,28,31)" fg:x="212" fg:w="2"/><text x="53.9209%" y="479.50"></text></g><g><title>rust-test`mi_find_page (2 samples, 0.51%)</title><rect x="54.1772%" y="437" width="0.5063%" height="15" fill="rgb(233,223,10)" fg:x="214" fg:w="2"/><text x="54.4272%" y="447.50"></text></g><g><title>rust-test`mi_page_free_list_extend (2 samples, 0.51%)</title><rect x="54.1772%" y="421" width="0.5063%" height="15" fill="rgb(215,21,27)" fg:x="214" fg:w="2"/><text x="54.4272%" y="431.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (6 samples, 1.52%)</title><rect x="54.1772%" y="469" width="1.5190%" height="15" fill="rgb(232,23,21)" fg:x="214" fg:w="6"/><text x="54.4272%" y="479.50"></text></g><g><title>rust-test`_mi_malloc_generic (6 samples, 1.52%)</title><rect x="54.1772%" y="453" width="1.5190%" height="15" fill="rgb(244,5,23)" fg:x="214" fg:w="6"/><text x="54.4272%" y="463.50"></text></g><g><title>rust-test`mi_page_free_list_extend (4 samples, 1.01%)</title><rect x="54.6835%" y="437" width="1.0127%" height="15" fill="rgb(226,81,46)" fg:x="216" fg:w="4"/><text x="54.9335%" y="447.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="58.7342%" y="453" width="0.5063%" height="15" fill="rgb(247,70,30)" fg:x="232" fg:w="2"/><text x="58.9842%" y="463.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="59.2405%" y="453" width="0.2532%" height="15" fill="rgb(212,68,19)" fg:x="234" fg:w="1"/><text x="59.4905%" y="463.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="59.2405%" y="437" width="0.2532%" height="15" fill="rgb(240,187,13)" fg:x="234" fg:w="1"/><text x="59.4905%" y="447.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="59.2405%" y="421" width="0.2532%" height="15" fill="rgb(223,113,26)" fg:x="234" fg:w="1"/><text x="59.4905%" y="431.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.76%)</title><rect x="60.7595%" y="437" width="0.7595%" height="15" fill="rgb(206,192,2)" fg:x="240" fg:w="3"/><text x="61.0095%" y="447.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 1.01%)</title><rect x="63.0380%" y="421" width="1.0127%" height="15" fill="rgb(241,108,4)" fg:x="249" fg:w="4"/><text x="63.2880%" y="431.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="64.0506%" y="389" width="0.2532%" height="15" fill="rgb(247,173,49)" fg:x="253" fg:w="1"/><text x="64.3006%" y="399.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="64.0506%" y="373" width="0.2532%" height="15" fill="rgb(224,114,35)" fg:x="253" fg:w="1"/><text x="64.3006%" y="383.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.51%)</title><rect x="64.0506%" y="421" width="0.5063%" height="15" fill="rgb(245,159,27)" fg:x="253" fg:w="2"/><text x="64.3006%" y="431.50"></text></g><g><title>rust-test`_mi_malloc_generic (2 samples, 0.51%)</title><rect x="64.0506%" y="405" width="0.5063%" height="15" fill="rgb(245,172,44)" fg:x="253" fg:w="2"/><text x="64.3006%" y="415.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="64.3038%" y="389" width="0.2532%" height="15" fill="rgb(236,23,11)" fg:x="254" fg:w="1"/><text x="64.5538%" y="399.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.76%)</title><rect x="66.8354%" y="405" width="0.7595%" height="15" fill="rgb(205,117,38)" fg:x="264" fg:w="3"/><text x="67.0854%" y="415.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="68.8608%" y="389" width="0.2532%" height="15" fill="rgb(237,72,25)" fg:x="272" fg:w="1"/><text x="69.1108%" y="399.50"></text></g><g><title>rust-test`mi_free_generic_local (1 samples, 0.25%)</title><rect x="69.1139%" y="389" width="0.2532%" height="15" fill="rgb(244,70,9)" fg:x="273" fg:w="1"/><text x="69.3639%" y="399.50"></text></g><g><title>libdyld.dylib`_tlv_get_addr (1 samples, 0.25%)</title><rect x="70.1266%" y="373" width="0.2532%" height="15" fill="rgb(217,125,39)" fg:x="277" fg:w="1"/><text x="70.3766%" y="383.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="70.3797%" y="373" width="0.2532%" height="15" fill="rgb(235,36,10)" fg:x="278" fg:w="1"/><text x="70.6297%" y="383.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.25%)</title><rect x="72.9114%" y="357" width="0.2532%" height="15" fill="rgb(251,123,47)" fg:x="288" fg:w="1"/><text x="73.1614%" y="367.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="73.1646%" y="357" width="0.2532%" height="15" fill="rgb(221,13,13)" fg:x="289" fg:w="1"/><text x="73.4146%" y="367.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.51%)</title><rect x="73.4177%" y="357" width="0.5063%" height="15" fill="rgb(238,131,9)" fg:x="290" fg:w="2"/><text x="73.6677%" y="367.50"></text></g><g><title>rust-test`_mi_malloc_generic (2 samples, 0.51%)</title><rect x="73.4177%" y="341" width="0.5063%" height="15" fill="rgb(211,50,8)" fg:x="290" fg:w="2"/><text x="73.6677%" y="351.50"></text></g><g><title>rust-test`mi_page_free_list_extend (2 samples, 0.51%)</title><rect x="73.4177%" y="325" width="0.5063%" height="15" fill="rgb(245,182,24)" fg:x="290" fg:w="2"/><text x="73.6677%" y="335.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="73.9241%" y="357" width="0.2532%" height="15" fill="rgb(242,14,37)" fg:x="292" fg:w="1"/><text x="74.1741%" y="367.50"></text></g><g><title>libdyld.dylib`_tlv_get_addr (1 samples, 0.25%)</title><rect x="75.6962%" y="341" width="0.2532%" height="15" fill="rgb(246,228,12)" fg:x="299" fg:w="1"/><text x="75.9462%" y="351.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="75.9494%" y="341" width="0.5063%" height="15" fill="rgb(213,55,15)" fg:x="300" fg:w="2"/><text x="76.1994%" y="351.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="76.4557%" y="325" width="0.2532%" height="15" fill="rgb(209,9,3)" fg:x="302" fg:w="1"/><text x="76.7057%" y="335.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="76.4557%" y="309" width="0.2532%" height="15" fill="rgb(230,59,30)" fg:x="302" fg:w="1"/><text x="76.7057%" y="319.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.51%)</title><rect x="76.4557%" y="341" width="0.5063%" height="15" fill="rgb(209,121,21)" fg:x="302" fg:w="2"/><text x="76.7057%" y="351.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="76.7089%" y="325" width="0.2532%" height="15" fill="rgb(220,109,13)" fg:x="303" fg:w="1"/><text x="76.9589%" y="335.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="76.9620%" y="341" width="0.2532%" height="15" fill="rgb(232,18,1)" fg:x="304" fg:w="1"/><text x="77.2120%" y="351.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="79.2405%" y="293" width="0.2532%" height="15" fill="rgb(215,41,42)" fg:x="313" fg:w="1"/><text x="79.4905%" y="303.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.51%)</title><rect x="79.2405%" y="325" width="0.5063%" height="15" fill="rgb(224,123,36)" fg:x="313" fg:w="2"/><text x="79.4905%" y="335.50"></text></g><g><title>rust-test`_mi_malloc_generic (2 samples, 0.51%)</title><rect x="79.2405%" y="309" width="0.5063%" height="15" fill="rgb(240,125,3)" fg:x="313" fg:w="2"/><text x="79.4905%" y="319.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="79.4937%" y="293" width="0.2532%" height="15" fill="rgb(205,98,50)" fg:x="314" fg:w="1"/><text x="79.7437%" y="303.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.25%)</title><rect x="81.7722%" y="277" width="0.2532%" height="15" fill="rgb(205,185,37)" fg:x="323" fg:w="1"/><text x="82.0222%" y="287.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="81.7722%" y="261" width="0.2532%" height="15" fill="rgb(238,207,15)" fg:x="323" fg:w="1"/><text x="82.0222%" y="271.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.76%)</title><rect x="81.7722%" y="309" width="0.7595%" height="15" fill="rgb(213,199,42)" fg:x="323" fg:w="3"/><text x="82.0222%" y="319.50"></text></g><g><title>rust-test`_mi_malloc_generic (3 samples, 0.76%)</title><rect x="81.7722%" y="293" width="0.7595%" height="15" fill="rgb(235,201,11)" fg:x="323" fg:w="3"/><text x="82.0222%" y="303.50"></text></g><g><title>rust-test`mi_page_free_list_extend (2 samples, 0.51%)</title><rect x="82.0253%" y="277" width="0.5063%" height="15" fill="rgb(207,46,11)" fg:x="324" fg:w="2"/><text x="82.2753%" y="287.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="83.2911%" y="293" width="0.5063%" height="15" fill="rgb(241,35,35)" fg:x="329" fg:w="2"/><text x="83.5411%" y="303.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.51%)</title><rect x="85.0633%" y="277" width="0.5063%" height="15" fill="rgb(243,32,47)" fg:x="336" fg:w="2"/><text x="85.3133%" y="287.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="85.5696%" y="277" width="0.2532%" height="15" fill="rgb(247,202,23)" fg:x="338" fg:w="1"/><text x="85.8196%" y="287.50"></text></g><g><title>libdyld.dylib`_tlv_get_addr (1 samples, 0.25%)</title><rect x="86.3291%" y="261" width="0.2532%" height="15" fill="rgb(219,102,11)" fg:x="341" fg:w="1"/><text x="86.5791%" y="271.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="86.5823%" y="261" width="0.2532%" height="15" fill="rgb(243,110,44)" fg:x="342" fg:w="1"/><text x="86.8323%" y="271.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="86.5823%" y="245" width="0.2532%" height="15" fill="rgb(222,74,54)" fg:x="342" fg:w="1"/><text x="86.8323%" y="255.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="86.5823%" y="229" width="0.2532%" height="15" fill="rgb(216,99,12)" fg:x="342" fg:w="1"/><text x="86.8323%" y="239.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="88.8608%" y="245" width="0.2532%" height="15" fill="rgb(226,22,26)" fg:x="351" fg:w="1"/><text x="89.1108%" y="255.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.25%)</title><rect x="89.1139%" y="245" width="0.2532%" height="15" fill="rgb(217,163,10)" fg:x="352" fg:w="1"/><text x="89.3639%" y="255.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.25%)</title><rect x="89.1139%" y="229" width="0.2532%" height="15" fill="rgb(213,25,53)" fg:x="352" fg:w="1"/><text x="89.3639%" y="239.50"></text></g><g><title>rust-test`mi_page_free_list_extend (1 samples, 0.25%)</title><rect x="89.1139%" y="213" width="0.2532%" height="15" fill="rgb(252,105,26)" fg:x="352" fg:w="1"/><text x="89.3639%" y="223.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="89.3671%" y="245" width="0.2532%" height="15" fill="rgb(220,39,43)" fg:x="353" fg:w="1"/><text x="89.6171%" y="255.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="90.3797%" y="229" width="0.2532%" height="15" fill="rgb(229,68,48)" fg:x="357" fg:w="1"/><text x="90.6297%" y="239.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="90.6329%" y="229" width="0.2532%" height="15" fill="rgb(252,8,32)" fg:x="358" fg:w="1"/><text x="90.8829%" y="239.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="90.8861%" y="213" width="0.2532%" height="15" fill="rgb(223,20,43)" fg:x="359" fg:w="1"/><text x="91.1361%" y="223.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="91.8987%" y="197" width="0.2532%" height="15" fill="rgb(229,81,49)" fg:x="363" fg:w="1"/><text x="92.1487%" y="207.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="92.1519%" y="197" width="0.2532%" height="15" fill="rgb(236,28,36)" fg:x="364" fg:w="1"/><text x="92.4019%" y="207.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="92.6582%" y="181" width="0.2532%" height="15" fill="rgb(249,185,26)" fg:x="366" fg:w="1"/><text x="92.9082%" y="191.50"></text></g><g><title>rust-test`DYLD-STUB$$memcpy (1 samples, 0.25%)</title><rect x="92.9114%" y="165" width="0.2532%" height="15" fill="rgb(249,174,33)" fg:x="367" fg:w="1"/><text x="93.1614%" y="175.50"></text></g><g><title>libdyld.dylib`_tlv_get_addr (1 samples, 0.25%)</title><rect x="94.1772%" y="133" width="0.2532%" height="15" fill="rgb(233,201,37)" fg:x="372" fg:w="1"/><text x="94.4272%" y="143.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.25%)</title><rect x="94.4304%" y="53" width="0.2532%" height="15" fill="rgb(221,78,26)" fg:x="373" fg:w="1"/><text x="94.6804%" y="63.50"></text></g><g><title>dyld`start (376 samples, 95.19%)</title><rect x="0.0000%" y="1621" width="95.1899%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1631.50">dyld`start</text></g><g><title>rust-test`main (376 samples, 95.19%)</title><rect x="0.0000%" y="1605" width="95.1899%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1615.50">rust-test`main</text></g><g><title>rust-test`std::sys::backtrace::__rust_begin_short_backtrace (376 samples, 95.19%)</title><rect x="0.0000%" y="1589" width="95.1899%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1599.50">rust-test`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-test`rust_test::main (376 samples, 95.19%)</title><rect x="0.0000%" y="1573" width="95.1899%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1583.50">rust-test`rust_test::main</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1557" width="95.1899%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1567.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1541" width="95.1899%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1551.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1525" width="95.1899%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1535.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1509" width="95.1899%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1519.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1493" width="95.1899%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1503.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1477" width="95.1899%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1487.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1461" width="95.1899%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1471.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1445" width="95.1899%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1455.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1429" width="95.1899%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1439.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1413" width="95.1899%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1423.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1397" width="95.1899%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1407.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1381" width="95.1899%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1391.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1365" width="95.1899%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1375.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1349" width="95.1899%" height="15" fill="rgb(227,97,0)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1359.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1333" width="95.1899%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1343.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1317" width="95.1899%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1327.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1301" width="95.1899%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1311.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1285" width="95.1899%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1295.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1269" width="95.1899%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1279.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1253" width="95.1899%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1263.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1237" width="95.1899%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1247.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1221" width="95.1899%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1231.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1205" width="95.1899%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1215.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1189" width="95.1899%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1199.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1173" width="95.1899%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1183.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1157" width="95.1899%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1167.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1141" width="95.1899%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1151.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1125" width="95.1899%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1135.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1109" width="95.1899%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1119.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1093" width="95.1899%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1103.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1077" width="95.1899%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1087.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1061" width="95.1899%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1071.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1045" width="95.1899%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1055.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1029" width="95.1899%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1039.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (376 samples, 95.19%)</title><rect x="0.0000%" y="1013" width="95.1899%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1023.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (375 samples, 94.94%)</title><rect x="0.2532%" y="997" width="94.9367%" height="15" fill="rgb(221,1,38)" fg:x="1" fg:w="375"/><text x="0.5032%" y="1007.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (375 samples, 94.94%)</title><rect x="0.2532%" y="981" width="94.9367%" height="15" fill="rgb(206,124,46)" fg:x="1" fg:w="375"/><text x="0.5032%" y="991.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (375 samples, 94.94%)</title><rect x="0.2532%" y="965" width="94.9367%" height="15" fill="rgb(249,21,11)" fg:x="1" fg:w="375"/><text x="0.5032%" y="975.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (375 samples, 94.94%)</title><rect x="0.2532%" y="949" width="94.9367%" height="15" fill="rgb(222,201,40)" fg:x="1" fg:w="375"/><text x="0.5032%" y="959.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (374 samples, 94.68%)</title><rect x="0.5063%" y="933" width="94.6835%" height="15" fill="rgb(235,61,29)" fg:x="2" fg:w="374"/><text x="0.7563%" y="943.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (373 samples, 94.43%)</title><rect x="0.7595%" y="917" width="94.4304%" height="15" fill="rgb(219,207,3)" fg:x="3" fg:w="373"/><text x="1.0095%" y="927.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (373 samples, 94.43%)</title><rect x="0.7595%" y="901" width="94.4304%" height="15" fill="rgb(222,56,46)" fg:x="3" fg:w="373"/><text x="1.0095%" y="911.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (372 samples, 94.18%)</title><rect x="1.0127%" y="885" width="94.1772%" height="15" fill="rgb(239,76,54)" fg:x="4" fg:w="372"/><text x="1.2627%" y="895.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (370 samples, 93.67%)</title><rect x="1.5190%" y="869" width="93.6709%" height="15" fill="rgb(231,124,27)" fg:x="6" fg:w="370"/><text x="1.7690%" y="879.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (368 samples, 93.16%)</title><rect x="2.0253%" y="853" width="93.1646%" height="15" fill="rgb(249,195,6)" fg:x="8" fg:w="368"/><text x="2.2753%" y="863.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (366 samples, 92.66%)</title><rect x="2.5316%" y="837" width="92.6582%" height="15" fill="rgb(237,174,47)" fg:x="10" fg:w="366"/><text x="2.7816%" y="847.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (362 samples, 91.65%)</title><rect x="3.5443%" y="821" width="91.6456%" height="15" fill="rgb(206,201,31)" fg:x="14" fg:w="362"/><text x="3.7943%" y="831.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (357 samples, 90.38%)</title><rect x="4.8101%" y="805" width="90.3797%" height="15" fill="rgb(231,57,52)" fg:x="19" fg:w="357"/><text x="5.0601%" y="815.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (352 samples, 89.11%)</title><rect x="6.0759%" y="789" width="89.1139%" height="15" fill="rgb(248,177,22)" fg:x="24" fg:w="352"/><text x="6.3259%" y="799.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (344 samples, 87.09%)</title><rect x="8.1013%" y="773" width="87.0886%" height="15" fill="rgb(215,211,37)" fg:x="32" fg:w="344"/><text x="8.3513%" y="783.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (340 samples, 86.08%)</title><rect x="9.1139%" y="757" width="86.0759%" height="15" fill="rgb(241,128,51)" fg:x="36" fg:w="340"/><text x="9.3639%" y="767.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (335 samples, 84.81%)</title><rect x="10.3797%" y="741" width="84.8101%" height="15" fill="rgb(227,165,31)" fg:x="41" fg:w="335"/><text x="10.6297%" y="751.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (330 samples, 83.54%)</title><rect x="11.6456%" y="725" width="83.5443%" height="15" fill="rgb(228,167,24)" fg:x="46" fg:w="330"/><text x="11.8956%" y="735.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (321 samples, 81.27%)</title><rect x="13.9241%" y="709" width="81.2658%" height="15" fill="rgb(228,143,12)" fg:x="55" fg:w="321"/><text x="14.1741%" y="719.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (320 samples, 81.01%)</title><rect x="14.1772%" y="693" width="81.0127%" height="15" fill="rgb(249,149,8)" fg:x="56" fg:w="320"/><text x="14.4272%" y="703.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (312 samples, 78.99%)</title><rect x="16.2025%" y="677" width="78.9873%" height="15" fill="rgb(243,35,44)" fg:x="64" fg:w="312"/><text x="16.4525%" y="687.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (303 samples, 76.71%)</title><rect x="18.4810%" y="661" width="76.7089%" height="15" fill="rgb(246,89,9)" fg:x="73" fg:w="303"/><text x="18.7310%" y="671.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (293 samples, 74.18%)</title><rect x="21.0127%" y="645" width="74.1772%" height="15" fill="rgb(233,213,13)" fg:x="83" fg:w="293"/><text x="21.2627%" y="655.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (282 samples, 71.39%)</title><rect x="23.7975%" y="629" width="71.3924%" height="15" fill="rgb(233,141,41)" fg:x="94" fg:w="282"/><text x="24.0475%" y="639.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (271 samples, 68.61%)</title><rect x="26.5823%" y="613" width="68.6076%" height="15" fill="rgb(239,167,4)" fg:x="105" fg:w="271"/><text x="26.8323%" y="623.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (262 samples, 66.33%)</title><rect x="28.8608%" y="597" width="66.3291%" height="15" fill="rgb(209,217,16)" fg:x="114" fg:w="262"/><text x="29.1108%" y="607.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (250 samples, 63.29%)</title><rect x="31.8987%" y="581" width="63.2911%" height="15" fill="rgb(219,88,35)" fg:x="126" fg:w="250"/><text x="32.1487%" y="591.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (236 samples, 59.75%)</title><rect x="35.4430%" y="565" width="59.7468%" height="15" fill="rgb(220,193,23)" fg:x="140" fg:w="236"/><text x="35.6930%" y="575.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (225 samples, 56.96%)</title><rect x="38.2278%" y="549" width="56.9620%" height="15" fill="rgb(230,90,52)" fg:x="151" fg:w="225"/><text x="38.4778%" y="559.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (209 samples, 52.91%)</title><rect x="42.2785%" y="533" width="52.9114%" height="15" fill="rgb(252,106,19)" fg:x="167" fg:w="209"/><text x="42.5285%" y="543.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (192 samples, 48.61%)</title><rect x="46.5823%" y="517" width="48.6076%" height="15" fill="rgb(206,74,20)" fg:x="184" fg:w="192"/><text x="46.8323%" y="527.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (185 samples, 46.84%)</title><rect x="48.3544%" y="501" width="46.8354%" height="15" fill="rgb(230,138,44)" fg:x="191" fg:w="185"/><text x="48.6044%" y="511.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (171 samples, 43.29%)</title><rect x="51.8987%" y="485" width="43.2911%" height="15" fill="rgb(235,182,43)" fg:x="205" fg:w="171"/><text x="52.1487%" y="495.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (156 samples, 39.49%)</title><rect x="55.6962%" y="469" width="39.4937%" height="15" fill="rgb(242,16,51)" fg:x="220" fg:w="156"/><text x="55.9462%" y="479.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (141 samples, 35.70%)</title><rect x="59.4937%" y="453" width="35.6962%" height="15" fill="rgb(248,9,4)" fg:x="235" fg:w="141"/><text x="59.7437%" y="463.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (133 samples, 33.67%)</title><rect x="61.5190%" y="437" width="33.6709%" height="15" fill="rgb(210,31,22)" fg:x="243" fg:w="133"/><text x="61.7690%" y="447.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (121 samples, 30.63%)</title><rect x="64.5570%" y="421" width="30.6329%" height="15" fill="rgb(239,54,39)" fg:x="255" fg:w="121"/><text x="64.8070%" y="431.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (109 samples, 27.59%)</title><rect x="67.5949%" y="405" width="27.5949%" height="15" fill="rgb(230,99,41)" fg:x="267" fg:w="109"/><text x="67.8449%" y="415.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (102 samples, 25.82%)</title><rect x="69.3671%" y="389" width="25.8228%" height="15" fill="rgb(253,106,12)" fg:x="274" fg:w="102"/><text x="69.6171%" y="399.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (97 samples, 24.56%)</title><rect x="70.6329%" y="373" width="24.5570%" height="15" fill="rgb(213,46,41)" fg:x="279" fg:w="97"/><text x="70.8829%" y="383.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (83 samples, 21.01%)</title><rect x="74.1772%" y="357" width="21.0127%" height="15" fill="rgb(215,133,35)" fg:x="293" fg:w="83"/><text x="74.4272%" y="367.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (71 samples, 17.97%)</title><rect x="77.2152%" y="341" width="17.9747%" height="15" fill="rgb(213,28,5)" fg:x="305" fg:w="71"/><text x="77.4652%" y="351.50">rust-test`rust_test::eval::e..</text></g><g><title>rust-test`rust_test::eval::eval (61 samples, 15.44%)</title><rect x="79.7468%" y="325" width="15.4430%" height="15" fill="rgb(215,77,49)" fg:x="315" fg:w="61"/><text x="79.9968%" y="335.50">rust-test`rust_test::eva..</text></g><g><title>rust-test`rust_test::eval::eval (50 samples, 12.66%)</title><rect x="82.5316%" y="309" width="12.6582%" height="15" fill="rgb(248,100,22)" fg:x="326" fg:w="50"/><text x="82.7816%" y="319.50">rust-test`rust_test..</text></g><g><title>rust-test`rust_test::eval::eval (45 samples, 11.39%)</title><rect x="83.7975%" y="293" width="11.3924%" height="15" fill="rgb(208,67,9)" fg:x="331" fg:w="45"/><text x="84.0475%" y="303.50">rust-test`rust_te..</text></g><g><title>rust-test`rust_test::eval::eval (37 samples, 9.37%)</title><rect x="85.8228%" y="277" width="9.3671%" height="15" fill="rgb(219,133,21)" fg:x="339" fg:w="37"/><text x="86.0728%" y="287.50">rust-test`rus..</text></g><g><title>rust-test`rust_test::eval::eval (33 samples, 8.35%)</title><rect x="86.8354%" y="261" width="8.3544%" height="15" fill="rgb(246,46,29)" fg:x="343" fg:w="33"/><text x="87.0854%" y="271.50">rust-test`ru..</text></g><g><title>rust-test`rust_test::eval::eval (22 samples, 5.57%)</title><rect x="89.6203%" y="245" width="5.5696%" height="15" fill="rgb(246,185,52)" fg:x="354" fg:w="22"/><text x="89.8703%" y="255.50">rust-te..</text></g><g><title>rust-test`rust_test::eval::eval (17 samples, 4.30%)</title><rect x="90.8861%" y="229" width="4.3038%" height="15" fill="rgb(252,136,11)" fg:x="359" fg:w="17"/><text x="91.1361%" y="239.50">rust-..</text></g><g><title>rust-test`rust_test::eval::eval (16 samples, 4.05%)</title><rect x="91.1392%" y="213" width="4.0506%" height="15" fill="rgb(219,138,53)" fg:x="360" fg:w="16"/><text x="91.3892%" y="223.50">rust..</text></g><g><title>rust-test`rust_test::eval::eval (11 samples, 2.78%)</title><rect x="92.4051%" y="197" width="2.7848%" height="15" fill="rgb(211,51,23)" fg:x="365" fg:w="11"/><text x="92.6551%" y="207.50">ru..</text></g><g><title>rust-test`rust_test::eval::eval (9 samples, 2.28%)</title><rect x="92.9114%" y="181" width="2.2785%" height="15" fill="rgb(247,221,28)" fg:x="367" fg:w="9"/><text x="93.1614%" y="191.50">r..</text></g><g><title>rust-test`rust_test::eval::eval (8 samples, 2.03%)</title><rect x="93.1646%" y="165" width="2.0253%" height="15" fill="rgb(251,222,45)" fg:x="368" fg:w="8"/><text x="93.4146%" y="175.50">r..</text></g><g><title>rust-test`rust_test::eval::eval (7 samples, 1.77%)</title><rect x="93.4177%" y="149" width="1.7722%" height="15" fill="rgb(217,162,53)" fg:x="369" fg:w="7"/><text x="93.6677%" y="159.50">r..</text></g><g><title>rust-test`rust_test::eval::eval (3 samples, 0.76%)</title><rect x="94.4304%" y="133" width="0.7595%" height="15" fill="rgb(229,93,14)" fg:x="373" fg:w="3"/><text x="94.6804%" y="143.50"></text></g><g><title>rust-test`rust_test::eval::eval (3 samples, 0.76%)</title><rect x="94.4304%" y="117" width="0.7595%" height="15" fill="rgb(209,67,49)" fg:x="373" fg:w="3"/><text x="94.6804%" y="127.50"></text></g><g><title>rust-test`rust_test::eval::eval (3 samples, 0.76%)</title><rect x="94.4304%" y="101" width="0.7595%" height="15" fill="rgb(213,87,29)" fg:x="373" fg:w="3"/><text x="94.6804%" y="111.50"></text></g><g><title>rust-test`rust_test::eval::eval (3 samples, 0.76%)</title><rect x="94.4304%" y="85" width="0.7595%" height="15" fill="rgb(205,151,52)" fg:x="373" fg:w="3"/><text x="94.6804%" y="95.50"></text></g><g><title>rust-test`rust_test::eval::eval (3 samples, 0.76%)</title><rect x="94.4304%" y="69" width="0.7595%" height="15" fill="rgb(253,215,39)" fg:x="373" fg:w="3"/><text x="94.6804%" y="79.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.51%)</title><rect x="94.6835%" y="53" width="0.5063%" height="15" fill="rgb(221,220,41)" fg:x="374" fg:w="2"/><text x="94.9335%" y="63.50"></text></g><g><title>rust-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="94.9367%" y="37" width="0.2532%" height="15" fill="rgb(218,133,21)" fg:x="375" fg:w="1"/><text x="95.1867%" y="47.50"></text></g><g><title>all (395 samples, 100%)</title><rect x="0.0000%" y="1637" width="100.0000%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="395"/><text x="0.2500%" y="1647.50"></text></g><g><title>libsystem_kernel.dylib`__exit (19 samples, 4.81%)</title><rect x="95.1899%" y="1621" width="4.8101%" height="15" fill="rgb(240,128,52)" fg:x="376" fg:w="19"/><text x="95.4399%" y="1631.50">libsys..</text></g></svg></svg>