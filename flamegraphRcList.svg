<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1686" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1669.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1669.00"> </text><svg id="frames" x="10" width="1180" total_samples="462"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.22%)</title><rect x="0.0000%" y="1605" width="0.2165%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1615.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.22%)</title><rect x="0.0000%" y="1589" width="0.2165%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1599.50"></text></g><g><title>rust-test`pest::parser_state::ParserState&lt;R&gt;::rule (1 samples, 0.22%)</title><rect x="0.2165%" y="1509" width="0.2165%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.4665%" y="1519.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="0.4329%" y="901" width="0.2165%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.6829%" y="911.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="1.0823%" y="837" width="0.2165%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="1.3323%" y="847.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="1.2987%" y="837" width="0.2165%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="1.5487%" y="847.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="2.1645%" y="821" width="0.2165%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="1"/><text x="2.4145%" y="831.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="2.8139%" y="805" width="0.2165%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="1"/><text x="3.0639%" y="815.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="3.0303%" y="805" width="0.2165%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="1"/><text x="3.2803%" y="815.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="4.5455%" y="773" width="0.2165%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="1"/><text x="4.7955%" y="783.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.65%)</title><rect x="4.7619%" y="773" width="0.6494%" height="15" fill="rgb(250,228,42)" fg:x="22" fg:w="3"/><text x="5.0119%" y="783.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="5.6277%" y="757" width="0.2165%" height="15" fill="rgb(240,193,28)" fg:x="26" fg:w="1"/><text x="5.8777%" y="767.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="5.8442%" y="757" width="0.2165%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="1"/><text x="6.0942%" y="767.50"></text></g><g><title>rust-test`mi_malloc_aligned (2 samples, 0.43%)</title><rect x="6.0606%" y="757" width="0.4329%" height="15" fill="rgb(206,188,39)" fg:x="28" fg:w="2"/><text x="6.3106%" y="767.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="7.3593%" y="741" width="0.2165%" height="15" fill="rgb(217,207,13)" fg:x="34" fg:w="1"/><text x="7.6093%" y="751.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="7.5758%" y="741" width="0.4329%" height="15" fill="rgb(231,73,38)" fg:x="35" fg:w="2"/><text x="7.8258%" y="751.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="7.7922%" y="725" width="0.2165%" height="15" fill="rgb(225,20,46)" fg:x="36" fg:w="1"/><text x="8.0422%" y="735.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="8.0087%" y="741" width="0.2165%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="1"/><text x="8.2587%" y="751.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="8.6580%" y="725" width="0.2165%" height="15" fill="rgb(221,200,47)" fg:x="40" fg:w="1"/><text x="8.9080%" y="735.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="8.8745%" y="725" width="0.2165%" height="15" fill="rgb(226,26,5)" fg:x="41" fg:w="1"/><text x="9.1245%" y="735.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="9.5238%" y="709" width="0.2165%" height="15" fill="rgb(249,33,26)" fg:x="44" fg:w="1"/><text x="9.7738%" y="719.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.87%)</title><rect x="9.7403%" y="709" width="0.8658%" height="15" fill="rgb(235,183,28)" fg:x="45" fg:w="4"/><text x="9.9903%" y="719.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="10.1732%" y="693" width="0.4329%" height="15" fill="rgb(221,5,38)" fg:x="47" fg:w="2"/><text x="10.4232%" y="703.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="10.1732%" y="677" width="0.4329%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="2"/><text x="10.4232%" y="687.50"></text></g><g><title>rust-test`mi_free (3 samples, 0.65%)</title><rect x="10.6061%" y="709" width="0.6494%" height="15" fill="rgb(241,131,45)" fg:x="49" fg:w="3"/><text x="10.8561%" y="719.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="11.6883%" y="693" width="0.2165%" height="15" fill="rgb(249,31,29)" fg:x="54" fg:w="1"/><text x="11.9383%" y="703.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="11.9048%" y="693" width="0.2165%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="1"/><text x="12.1548%" y="703.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="12.5541%" y="677" width="0.2165%" height="15" fill="rgb(238,160,17)" fg:x="58" fg:w="1"/><text x="12.8041%" y="687.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.43%)</title><rect x="12.7706%" y="677" width="0.4329%" height="15" fill="rgb(214,148,48)" fg:x="59" fg:w="2"/><text x="13.0206%" y="687.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.43%)</title><rect x="14.2857%" y="661" width="0.4329%" height="15" fill="rgb(232,36,49)" fg:x="66" fg:w="2"/><text x="14.5357%" y="671.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="14.7186%" y="661" width="0.2165%" height="15" fill="rgb(209,103,24)" fg:x="68" fg:w="1"/><text x="14.9686%" y="671.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="14.7186%" y="645" width="0.2165%" height="15" fill="rgb(229,88,8)" fg:x="68" fg:w="1"/><text x="14.9686%" y="655.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="15.3680%" y="645" width="0.2165%" height="15" fill="rgb(213,181,19)" fg:x="71" fg:w="1"/><text x="15.6180%" y="655.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="15.5844%" y="645" width="0.2165%" height="15" fill="rgb(254,191,54)" fg:x="72" fg:w="1"/><text x="15.8344%" y="655.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="15.8009%" y="645" width="0.2165%" height="15" fill="rgb(241,83,37)" fg:x="73" fg:w="1"/><text x="16.0509%" y="655.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="16.0173%" y="645" width="0.2165%" height="15" fill="rgb(233,36,39)" fg:x="74" fg:w="1"/><text x="16.2673%" y="655.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="16.0173%" y="629" width="0.2165%" height="15" fill="rgb(226,3,54)" fg:x="74" fg:w="1"/><text x="16.2673%" y="639.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="16.2338%" y="645" width="0.2165%" height="15" fill="rgb(245,192,40)" fg:x="75" fg:w="1"/><text x="16.4838%" y="655.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.43%)</title><rect x="16.6667%" y="629" width="0.4329%" height="15" fill="rgb(238,167,29)" fg:x="77" fg:w="2"/><text x="16.9167%" y="639.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="17.0996%" y="629" width="0.4329%" height="15" fill="rgb(232,182,51)" fg:x="79" fg:w="2"/><text x="17.3496%" y="639.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="17.3160%" y="613" width="0.2165%" height="15" fill="rgb(231,60,39)" fg:x="80" fg:w="1"/><text x="17.5660%" y="623.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="17.3160%" y="597" width="0.2165%" height="15" fill="rgb(208,69,12)" fg:x="80" fg:w="1"/><text x="17.5660%" y="607.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="17.5325%" y="629" width="0.2165%" height="15" fill="rgb(235,93,37)" fg:x="81" fg:w="1"/><text x="17.7825%" y="639.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.43%)</title><rect x="17.7489%" y="629" width="0.4329%" height="15" fill="rgb(213,116,39)" fg:x="82" fg:w="2"/><text x="17.9989%" y="639.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="18.1818%" y="629" width="0.2165%" height="15" fill="rgb(222,207,29)" fg:x="84" fg:w="1"/><text x="18.4318%" y="639.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 1.08%)</title><rect x="19.9134%" y="613" width="1.0823%" height="15" fill="rgb(206,96,30)" fg:x="92" fg:w="5"/><text x="20.1634%" y="623.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="20.9957%" y="613" width="0.4329%" height="15" fill="rgb(218,138,4)" fg:x="97" fg:w="2"/><text x="21.2457%" y="623.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="21.4286%" y="613" width="0.2165%" height="15" fill="rgb(250,191,14)" fg:x="99" fg:w="1"/><text x="21.6786%" y="623.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="21.6450%" y="613" width="0.2165%" height="15" fill="rgb(239,60,40)" fg:x="100" fg:w="1"/><text x="21.8950%" y="623.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="22.7273%" y="597" width="0.4329%" height="15" fill="rgb(206,27,48)" fg:x="105" fg:w="2"/><text x="22.9773%" y="607.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="22.9437%" y="581" width="0.2165%" height="15" fill="rgb(225,35,8)" fg:x="106" fg:w="1"/><text x="23.1937%" y="591.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="24.4589%" y="581" width="0.2165%" height="15" fill="rgb(250,213,24)" fg:x="113" fg:w="1"/><text x="24.7089%" y="591.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="24.6753%" y="581" width="0.4329%" height="15" fill="rgb(247,123,22)" fg:x="114" fg:w="2"/><text x="24.9253%" y="591.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="25.1082%" y="581" width="0.2165%" height="15" fill="rgb(231,138,38)" fg:x="116" fg:w="1"/><text x="25.3582%" y="591.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="25.1082%" y="565" width="0.2165%" height="15" fill="rgb(231,145,46)" fg:x="116" fg:w="1"/><text x="25.3582%" y="575.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="25.3247%" y="581" width="0.2165%" height="15" fill="rgb(251,118,11)" fg:x="117" fg:w="1"/><text x="25.5747%" y="591.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="26.6234%" y="565" width="0.4329%" height="15" fill="rgb(217,147,25)" fg:x="123" fg:w="2"/><text x="26.8734%" y="575.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="26.8398%" y="549" width="0.2165%" height="15" fill="rgb(247,81,37)" fg:x="124" fg:w="1"/><text x="27.0898%" y="559.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.43%)</title><rect x="27.0563%" y="565" width="0.4329%" height="15" fill="rgb(209,12,38)" fg:x="125" fg:w="2"/><text x="27.3063%" y="575.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.22%)</title><rect x="27.4892%" y="565" width="0.2165%" height="15" fill="rgb(227,1,9)" fg:x="127" fg:w="1"/><text x="27.7392%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="28.5714%" y="549" width="0.2165%" height="15" fill="rgb(248,47,43)" fg:x="132" fg:w="1"/><text x="28.8214%" y="559.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="28.7879%" y="549" width="0.2165%" height="15" fill="rgb(221,10,30)" fg:x="133" fg:w="1"/><text x="29.0379%" y="559.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="28.7879%" y="533" width="0.2165%" height="15" fill="rgb(210,229,1)" fg:x="133" fg:w="1"/><text x="29.0379%" y="543.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="29.0043%" y="549" width="0.2165%" height="15" fill="rgb(222,148,37)" fg:x="134" fg:w="1"/><text x="29.2543%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="29.0043%" y="533" width="0.2165%" height="15" fill="rgb(234,67,33)" fg:x="134" fg:w="1"/><text x="29.2543%" y="543.50"></text></g><g><title>rust-test`mi_free (3 samples, 0.65%)</title><rect x="29.2208%" y="549" width="0.6494%" height="15" fill="rgb(247,98,35)" fg:x="135" fg:w="3"/><text x="29.4708%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 1.08%)</title><rect x="31.8182%" y="533" width="1.0823%" height="15" fill="rgb(247,138,52)" fg:x="147" fg:w="5"/><text x="32.0682%" y="543.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="32.9004%" y="533" width="0.2165%" height="15" fill="rgb(213,79,30)" fg:x="152" fg:w="1"/><text x="33.1504%" y="543.50"></text></g><g><title>rust-test`mi_free (5 samples, 1.08%)</title><rect x="33.1169%" y="533" width="1.0823%" height="15" fill="rgb(246,177,23)" fg:x="153" fg:w="5"/><text x="33.3669%" y="543.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="35.4978%" y="517" width="0.2165%" height="15" fill="rgb(230,62,27)" fg:x="164" fg:w="1"/><text x="35.7478%" y="527.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="35.7143%" y="517" width="0.2165%" height="15" fill="rgb(216,154,8)" fg:x="165" fg:w="1"/><text x="35.9643%" y="527.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="35.7143%" y="501" width="0.2165%" height="15" fill="rgb(244,35,45)" fg:x="165" fg:w="1"/><text x="35.9643%" y="511.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="35.7143%" y="485" width="0.2165%" height="15" fill="rgb(251,115,12)" fg:x="165" fg:w="1"/><text x="35.9643%" y="495.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="35.9307%" y="517" width="0.2165%" height="15" fill="rgb(240,54,50)" fg:x="166" fg:w="1"/><text x="36.1807%" y="527.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="37.2294%" y="501" width="0.2165%" height="15" fill="rgb(233,84,52)" fg:x="172" fg:w="1"/><text x="37.4794%" y="511.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="37.4459%" y="501" width="0.4329%" height="15" fill="rgb(207,117,47)" fg:x="173" fg:w="2"/><text x="37.6959%" y="511.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="37.6623%" y="485" width="0.2165%" height="15" fill="rgb(249,43,39)" fg:x="174" fg:w="1"/><text x="37.9123%" y="495.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (2 samples, 0.43%)</title><rect x="37.8788%" y="501" width="0.4329%" height="15" fill="rgb(209,38,44)" fg:x="175" fg:w="2"/><text x="38.1288%" y="511.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="38.0952%" y="485" width="0.2165%" height="15" fill="rgb(236,212,23)" fg:x="176" fg:w="1"/><text x="38.3452%" y="495.50"></text></g><g><title>rust-test`mi_free (6 samples, 1.30%)</title><rect x="38.3117%" y="501" width="1.2987%" height="15" fill="rgb(242,79,21)" fg:x="177" fg:w="6"/><text x="38.5617%" y="511.50"></text></g><g><title>rust-test`mi_malloc_aligned (2 samples, 0.43%)</title><rect x="39.6104%" y="501" width="0.4329%" height="15" fill="rgb(211,96,35)" fg:x="183" fg:w="2"/><text x="39.8604%" y="511.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.08%)</title><rect x="41.9913%" y="485" width="1.0823%" height="15" fill="rgb(253,215,40)" fg:x="194" fg:w="5"/><text x="42.2413%" y="495.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="42.8571%" y="469" width="0.2165%" height="15" fill="rgb(211,81,21)" fg:x="198" fg:w="1"/><text x="43.1071%" y="479.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="43.0736%" y="485" width="0.2165%" height="15" fill="rgb(208,190,38)" fg:x="199" fg:w="1"/><text x="43.3236%" y="495.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.43%)</title><rect x="43.2900%" y="485" width="0.4329%" height="15" fill="rgb(235,213,38)" fg:x="200" fg:w="2"/><text x="43.5400%" y="495.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="43.7229%" y="485" width="0.2165%" height="15" fill="rgb(237,122,38)" fg:x="202" fg:w="1"/><text x="43.9729%" y="495.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.65%)</title><rect x="45.4545%" y="469" width="0.6494%" height="15" fill="rgb(244,218,35)" fg:x="210" fg:w="3"/><text x="45.7045%" y="479.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.43%)</title><rect x="46.1039%" y="469" width="0.4329%" height="15" fill="rgb(240,68,47)" fg:x="213" fg:w="2"/><text x="46.3539%" y="479.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.22%)</title><rect x="46.5368%" y="469" width="0.2165%" height="15" fill="rgb(210,16,53)" fg:x="215" fg:w="1"/><text x="46.7868%" y="479.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.22%)</title><rect x="46.5368%" y="453" width="0.2165%" height="15" fill="rgb(235,124,12)" fg:x="215" fg:w="1"/><text x="46.7868%" y="463.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="46.7532%" y="469" width="0.2165%" height="15" fill="rgb(224,169,11)" fg:x="216" fg:w="1"/><text x="47.0032%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.43%)</title><rect x="48.2684%" y="453" width="0.4329%" height="15" fill="rgb(250,166,2)" fg:x="223" fg:w="2"/><text x="48.5184%" y="463.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.08%)</title><rect x="48.7013%" y="453" width="1.0823%" height="15" fill="rgb(242,216,29)" fg:x="225" fg:w="5"/><text x="48.9513%" y="463.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="49.5671%" y="437" width="0.2165%" height="15" fill="rgb(230,116,27)" fg:x="229" fg:w="1"/><text x="49.8171%" y="447.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="49.5671%" y="421" width="0.2165%" height="15" fill="rgb(228,99,48)" fg:x="229" fg:w="1"/><text x="49.8171%" y="431.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="49.7835%" y="453" width="0.2165%" height="15" fill="rgb(253,11,6)" fg:x="230" fg:w="1"/><text x="50.0335%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="49.7835%" y="437" width="0.2165%" height="15" fill="rgb(247,143,39)" fg:x="230" fg:w="1"/><text x="50.0335%" y="447.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="50.0000%" y="453" width="0.2165%" height="15" fill="rgb(236,97,10)" fg:x="231" fg:w="1"/><text x="50.2500%" y="463.50"></text></g><g><title>rust-test`mi_malloc_aligned (2 samples, 0.43%)</title><rect x="50.2165%" y="453" width="0.4329%" height="15" fill="rgb(233,208,19)" fg:x="232" fg:w="2"/><text x="50.4665%" y="463.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="51.9481%" y="437" width="0.2165%" height="15" fill="rgb(216,164,2)" fg:x="240" fg:w="1"/><text x="52.1981%" y="447.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (2 samples, 0.43%)</title><rect x="52.1645%" y="437" width="0.4329%" height="15" fill="rgb(220,129,5)" fg:x="241" fg:w="2"/><text x="52.4145%" y="447.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.22%)</title><rect x="52.3810%" y="421" width="0.2165%" height="15" fill="rgb(242,17,10)" fg:x="242" fg:w="1"/><text x="52.6310%" y="431.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.22%)</title><rect x="52.3810%" y="405" width="0.2165%" height="15" fill="rgb(242,107,0)" fg:x="242" fg:w="1"/><text x="52.6310%" y="415.50"></text></g><g><title>rust-test`mi_find_page (1 samples, 0.22%)</title><rect x="52.3810%" y="389" width="0.2165%" height="15" fill="rgb(251,28,31)" fg:x="242" fg:w="1"/><text x="52.6310%" y="399.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="52.5974%" y="437" width="0.2165%" height="15" fill="rgb(233,223,10)" fg:x="243" fg:w="1"/><text x="52.8474%" y="447.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="52.5974%" y="421" width="0.2165%" height="15" fill="rgb(215,21,27)" fg:x="243" fg:w="1"/><text x="52.8474%" y="431.50"></text></g><g><title>rust-test`mi_free (3 samples, 0.65%)</title><rect x="52.8139%" y="437" width="0.6494%" height="15" fill="rgb(232,23,21)" fg:x="244" fg:w="3"/><text x="53.0639%" y="447.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="54.3290%" y="421" width="0.2165%" height="15" fill="rgb(244,5,23)" fg:x="251" fg:w="1"/><text x="54.5790%" y="431.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.65%)</title><rect x="54.5455%" y="421" width="0.6494%" height="15" fill="rgb(226,81,46)" fg:x="252" fg:w="3"/><text x="54.7955%" y="431.50"></text></g><g><title>rust-test`mi_free (4 samples, 0.87%)</title><rect x="55.1948%" y="421" width="0.8658%" height="15" fill="rgb(247,70,30)" fg:x="255" fg:w="4"/><text x="55.4448%" y="431.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="56.0606%" y="421" width="0.2165%" height="15" fill="rgb(212,68,19)" fg:x="259" fg:w="1"/><text x="56.3106%" y="431.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="58.0087%" y="405" width="0.2165%" height="15" fill="rgb(240,187,13)" fg:x="268" fg:w="1"/><text x="58.2587%" y="415.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.65%)</title><rect x="58.2251%" y="405" width="0.6494%" height="15" fill="rgb(223,113,26)" fg:x="269" fg:w="3"/><text x="58.4751%" y="415.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="58.8745%" y="389" width="0.2165%" height="15" fill="rgb(206,192,2)" fg:x="272" fg:w="1"/><text x="59.1245%" y="399.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (2 samples, 0.43%)</title><rect x="58.8745%" y="405" width="0.4329%" height="15" fill="rgb(241,108,4)" fg:x="272" fg:w="2"/><text x="59.1245%" y="415.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="59.0909%" y="389" width="0.2165%" height="15" fill="rgb(247,173,49)" fg:x="273" fg:w="1"/><text x="59.3409%" y="399.50"></text></g><g><title>rust-test`mi_free (4 samples, 0.87%)</title><rect x="59.3074%" y="405" width="0.8658%" height="15" fill="rgb(224,114,35)" fg:x="274" fg:w="4"/><text x="59.5574%" y="415.50"></text></g><g><title>rust-test`mi_malloc_aligned (2 samples, 0.43%)</title><rect x="60.1732%" y="405" width="0.4329%" height="15" fill="rgb(245,159,27)" fg:x="278" fg:w="2"/><text x="60.4232%" y="415.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="62.5541%" y="389" width="0.2165%" height="15" fill="rgb(245,172,44)" fg:x="289" fg:w="1"/><text x="62.8041%" y="399.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="62.7706%" y="389" width="0.4329%" height="15" fill="rgb(236,23,11)" fg:x="290" fg:w="2"/><text x="63.0206%" y="399.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="62.9870%" y="373" width="0.2165%" height="15" fill="rgb(205,117,38)" fg:x="291" fg:w="1"/><text x="63.2370%" y="383.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="63.2035%" y="389" width="0.2165%" height="15" fill="rgb(237,72,25)" fg:x="292" fg:w="1"/><text x="63.4535%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="63.2035%" y="373" width="0.2165%" height="15" fill="rgb(244,70,9)" fg:x="292" fg:w="1"/><text x="63.4535%" y="383.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="63.4199%" y="389" width="0.2165%" height="15" fill="rgb(217,125,39)" fg:x="293" fg:w="1"/><text x="63.6699%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="64.9351%" y="373" width="0.2165%" height="15" fill="rgb(235,36,10)" fg:x="300" fg:w="1"/><text x="65.1851%" y="383.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.65%)</title><rect x="65.1515%" y="373" width="0.6494%" height="15" fill="rgb(251,123,47)" fg:x="301" fg:w="3"/><text x="65.4015%" y="383.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="65.8009%" y="373" width="0.2165%" height="15" fill="rgb(221,13,13)" fg:x="304" fg:w="1"/><text x="66.0509%" y="383.50"></text></g><g><title>rust-test`mi_free (3 samples, 0.65%)</title><rect x="66.0173%" y="373" width="0.6494%" height="15" fill="rgb(238,131,9)" fg:x="305" fg:w="3"/><text x="66.2673%" y="383.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="66.6667%" y="373" width="0.2165%" height="15" fill="rgb(211,50,8)" fg:x="308" fg:w="1"/><text x="66.9167%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="68.3983%" y="357" width="0.2165%" height="15" fill="rgb(245,182,24)" fg:x="316" fg:w="1"/><text x="68.6483%" y="367.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.65%)</title><rect x="68.6147%" y="357" width="0.6494%" height="15" fill="rgb(242,14,37)" fg:x="317" fg:w="3"/><text x="68.8647%" y="367.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="69.2641%" y="357" width="0.2165%" height="15" fill="rgb(246,228,12)" fg:x="320" fg:w="1"/><text x="69.5141%" y="367.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="69.2641%" y="341" width="0.2165%" height="15" fill="rgb(213,55,15)" fg:x="320" fg:w="1"/><text x="69.5141%" y="351.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="69.4805%" y="357" width="0.2165%" height="15" fill="rgb(209,9,3)" fg:x="321" fg:w="1"/><text x="69.7305%" y="367.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="69.4805%" y="341" width="0.2165%" height="15" fill="rgb(230,59,30)" fg:x="321" fg:w="1"/><text x="69.7305%" y="351.50"></text></g><g><title>rust-test`mi_free (6 samples, 1.30%)</title><rect x="69.6970%" y="357" width="1.2987%" height="15" fill="rgb(209,121,21)" fg:x="322" fg:w="6"/><text x="69.9470%" y="367.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.43%)</title><rect x="72.7273%" y="341" width="0.4329%" height="15" fill="rgb(220,109,13)" fg:x="336" fg:w="2"/><text x="72.9773%" y="351.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 1.52%)</title><rect x="73.1602%" y="341" width="1.5152%" height="15" fill="rgb(232,18,1)" fg:x="338" fg:w="7"/><text x="73.4102%" y="351.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="74.2424%" y="325" width="0.4329%" height="15" fill="rgb(215,41,42)" fg:x="343" fg:w="2"/><text x="74.4924%" y="335.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="75.7576%" y="325" width="0.2165%" height="15" fill="rgb(224,123,36)" fg:x="350" fg:w="1"/><text x="76.0076%" y="335.50"></text></g><g><title>rust-test`mi_free (3 samples, 0.65%)</title><rect x="75.9740%" y="325" width="0.6494%" height="15" fill="rgb(240,125,3)" fg:x="351" fg:w="3"/><text x="76.2240%" y="335.50"></text></g><g><title>rust-test`mi_malloc_aligned (2 samples, 0.43%)</title><rect x="76.6234%" y="325" width="0.4329%" height="15" fill="rgb(205,98,50)" fg:x="354" fg:w="2"/><text x="76.8734%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.65%)</title><rect x="79.0043%" y="309" width="0.6494%" height="15" fill="rgb(205,185,37)" fg:x="365" fg:w="3"/><text x="79.2543%" y="319.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="79.6537%" y="309" width="0.2165%" height="15" fill="rgb(238,207,15)" fg:x="368" fg:w="1"/><text x="79.9037%" y="319.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="79.6537%" y="293" width="0.2165%" height="15" fill="rgb(213,199,42)" fg:x="368" fg:w="1"/><text x="79.9037%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="81.8182%" y="293" width="0.2165%" height="15" fill="rgb(235,201,11)" fg:x="378" fg:w="1"/><text x="82.0682%" y="303.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.65%)</title><rect x="82.0346%" y="293" width="0.6494%" height="15" fill="rgb(207,46,11)" fg:x="379" fg:w="3"/><text x="82.2846%" y="303.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="82.4675%" y="277" width="0.2165%" height="15" fill="rgb(241,35,35)" fg:x="381" fg:w="1"/><text x="82.7175%" y="287.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="82.6840%" y="293" width="0.2165%" height="15" fill="rgb(243,32,47)" fg:x="382" fg:w="1"/><text x="82.9340%" y="303.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="82.6840%" y="277" width="0.2165%" height="15" fill="rgb(247,202,23)" fg:x="382" fg:w="1"/><text x="82.9340%" y="287.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.43%)</title><rect x="82.9004%" y="293" width="0.4329%" height="15" fill="rgb(219,102,11)" fg:x="383" fg:w="2"/><text x="83.1504%" y="303.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="84.6320%" y="277" width="0.4329%" height="15" fill="rgb(243,110,44)" fg:x="391" fg:w="2"/><text x="84.8820%" y="287.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.87%)</title><rect x="85.9307%" y="261" width="0.8658%" height="15" fill="rgb(222,74,54)" fg:x="397" fg:w="4"/><text x="86.1807%" y="271.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="86.5801%" y="245" width="0.2165%" height="15" fill="rgb(216,99,12)" fg:x="400" fg:w="1"/><text x="86.8301%" y="255.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="86.7965%" y="261" width="0.2165%" height="15" fill="rgb(226,22,26)" fg:x="401" fg:w="1"/><text x="87.0465%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="87.6623%" y="245" width="0.2165%" height="15" fill="rgb(217,163,10)" fg:x="405" fg:w="1"/><text x="87.9123%" y="255.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="87.8788%" y="245" width="0.4329%" height="15" fill="rgb(213,25,53)" fg:x="406" fg:w="2"/><text x="88.1288%" y="255.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="88.0952%" y="229" width="0.2165%" height="15" fill="rgb(252,105,26)" fg:x="407" fg:w="1"/><text x="88.3452%" y="239.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="88.3117%" y="245" width="0.2165%" height="15" fill="rgb(220,39,43)" fg:x="408" fg:w="1"/><text x="88.5617%" y="255.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="88.3117%" y="229" width="0.2165%" height="15" fill="rgb(229,68,48)" fg:x="408" fg:w="1"/><text x="88.5617%" y="239.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.43%)</title><rect x="88.5281%" y="245" width="0.4329%" height="15" fill="rgb(252,8,32)" fg:x="409" fg:w="2"/><text x="88.7781%" y="255.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="90.4762%" y="229" width="0.4329%" height="15" fill="rgb(223,20,43)" fg:x="418" fg:w="2"/><text x="90.7262%" y="239.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="90.6926%" y="213" width="0.2165%" height="15" fill="rgb(229,81,49)" fg:x="419" fg:w="1"/><text x="90.9426%" y="223.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="90.9091%" y="229" width="0.2165%" height="15" fill="rgb(236,28,36)" fg:x="420" fg:w="1"/><text x="91.1591%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="90.9091%" y="213" width="0.2165%" height="15" fill="rgb(249,185,26)" fg:x="420" fg:w="1"/><text x="91.1591%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="91.5584%" y="213" width="0.2165%" height="15" fill="rgb(249,174,33)" fg:x="423" fg:w="1"/><text x="91.8084%" y="223.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="91.7749%" y="213" width="0.2165%" height="15" fill="rgb(233,201,37)" fg:x="424" fg:w="1"/><text x="92.0249%" y="223.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="91.7749%" y="197" width="0.2165%" height="15" fill="rgb(221,78,26)" fg:x="424" fg:w="1"/><text x="92.0249%" y="207.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="91.7749%" y="181" width="0.2165%" height="15" fill="rgb(250,127,30)" fg:x="424" fg:w="1"/><text x="92.0249%" y="191.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="91.9913%" y="213" width="0.2165%" height="15" fill="rgb(230,49,44)" fg:x="425" fg:w="1"/><text x="92.2413%" y="223.50"></text></g><g><title>rust-test`mi_free (3 samples, 0.65%)</title><rect x="92.2078%" y="213" width="0.6494%" height="15" fill="rgb(229,67,23)" fg:x="426" fg:w="3"/><text x="92.4578%" y="223.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="93.2900%" y="197" width="0.2165%" height="15" fill="rgb(249,83,47)" fg:x="431" fg:w="1"/><text x="93.5400%" y="207.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="93.5065%" y="197" width="0.2165%" height="15" fill="rgb(215,43,3)" fg:x="432" fg:w="1"/><text x="93.7565%" y="207.50"></text></g><g><title>rust-test`mi_free (2 samples, 0.43%)</title><rect x="93.7229%" y="197" width="0.4329%" height="15" fill="rgb(238,154,13)" fg:x="433" fg:w="2"/><text x="93.9729%" y="207.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="94.1558%" y="197" width="0.2165%" height="15" fill="rgb(219,56,2)" fg:x="435" fg:w="1"/><text x="94.4058%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="94.8052%" y="181" width="0.2165%" height="15" fill="rgb(233,0,4)" fg:x="438" fg:w="1"/><text x="95.0552%" y="191.50"></text></g><g><title>rust-test`core::ptr::drop_in_place&lt;rust_test::eval::Value&gt; (1 samples, 0.22%)</title><rect x="95.0216%" y="181" width="0.2165%" height="15" fill="rgb(235,30,7)" fg:x="439" fg:w="1"/><text x="95.2716%" y="191.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="95.2381%" y="165" width="0.2165%" height="15" fill="rgb(250,79,13)" fg:x="440" fg:w="1"/><text x="95.4881%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.43%)</title><rect x="96.1039%" y="149" width="0.4329%" height="15" fill="rgb(211,146,34)" fg:x="444" fg:w="2"/><text x="96.3539%" y="159.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="96.5368%" y="149" width="0.2165%" height="15" fill="rgb(228,22,38)" fg:x="446" fg:w="1"/><text x="96.7868%" y="159.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="96.5368%" y="133" width="0.2165%" height="15" fill="rgb(235,168,5)" fg:x="446" fg:w="1"/><text x="96.7868%" y="143.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="96.5368%" y="117" width="0.2165%" height="15" fill="rgb(221,155,16)" fg:x="446" fg:w="1"/><text x="96.7868%" y="127.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="96.7532%" y="149" width="0.2165%" height="15" fill="rgb(215,215,53)" fg:x="447" fg:w="1"/><text x="97.0032%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="96.7532%" y="133" width="0.2165%" height="15" fill="rgb(223,4,10)" fg:x="447" fg:w="1"/><text x="97.0032%" y="143.50"></text></g><g><title>rust-test`mi_free (1 samples, 0.22%)</title><rect x="96.9697%" y="149" width="0.2165%" height="15" fill="rgb(234,103,6)" fg:x="448" fg:w="1"/><text x="97.2197%" y="159.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="97.6190%" y="133" width="0.2165%" height="15" fill="rgb(227,97,0)" fg:x="451" fg:w="1"/><text x="97.8690%" y="143.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="97.6190%" y="117" width="0.2165%" height="15" fill="rgb(234,150,53)" fg:x="451" fg:w="1"/><text x="97.8690%" y="127.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="98.0519%" y="117" width="0.2165%" height="15" fill="rgb(228,201,54)" fg:x="453" fg:w="1"/><text x="98.3019%" y="127.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="98.0519%" y="101" width="0.2165%" height="15" fill="rgb(222,22,37)" fg:x="453" fg:w="1"/><text x="98.3019%" y="111.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="98.2684%" y="101" width="0.2165%" height="15" fill="rgb(237,53,32)" fg:x="454" fg:w="1"/><text x="98.5184%" y="111.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="98.4848%" y="101" width="0.2165%" height="15" fill="rgb(233,25,53)" fg:x="455" fg:w="1"/><text x="98.7348%" y="111.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="98.7013%" y="69" width="0.2165%" height="15" fill="rgb(210,40,34)" fg:x="456" fg:w="1"/><text x="98.9513%" y="79.50"></text></g><g><title>rust-test`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="98.7013%" y="53" width="0.2165%" height="15" fill="rgb(241,220,44)" fg:x="456" fg:w="1"/><text x="98.9513%" y="63.50"></text></g><g><title>rust-test`mi_malloc_aligned (1 samples, 0.22%)</title><rect x="99.1342%" y="37" width="0.2165%" height="15" fill="rgb(235,28,35)" fg:x="458" fg:w="1"/><text x="99.3842%" y="47.50"></text></g><g><title>dyld`start (460 samples, 99.57%)</title><rect x="0.0000%" y="1621" width="99.5671%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="460"/><text x="0.2500%" y="1631.50">dyld`start</text></g><g><title>rust-test`main (459 samples, 99.35%)</title><rect x="0.2165%" y="1605" width="99.3506%" height="15" fill="rgb(224,130,29)" fg:x="1" fg:w="459"/><text x="0.4665%" y="1615.50">rust-test`main</text></g><g><title>rust-test`std::rt::lang_start (459 samples, 99.35%)</title><rect x="0.2165%" y="1589" width="99.3506%" height="15" fill="rgb(235,212,8)" fg:x="1" fg:w="459"/><text x="0.4665%" y="1599.50">rust-test`std::rt::lang_start</text></g><g><title>rust-test`std::rt::lang_start_internal (459 samples, 99.35%)</title><rect x="0.2165%" y="1573" width="99.3506%" height="15" fill="rgb(223,33,50)" fg:x="1" fg:w="459"/><text x="0.4665%" y="1583.50">rust-test`std::rt::lang_start_internal</text></g><g><title>rust-test`std::rt::lang_start::_{{closure}} (459 samples, 99.35%)</title><rect x="0.2165%" y="1557" width="99.3506%" height="15" fill="rgb(219,149,13)" fg:x="1" fg:w="459"/><text x="0.4665%" y="1567.50">rust-test`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-test`std::sys_common::backtrace::__rust_begin_short_backtrace (459 samples, 99.35%)</title><rect x="0.2165%" y="1541" width="99.3506%" height="15" fill="rgb(250,156,29)" fg:x="1" fg:w="459"/><text x="0.4665%" y="1551.50">rust-test`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-test`rust_test::main (459 samples, 99.35%)</title><rect x="0.2165%" y="1525" width="99.3506%" height="15" fill="rgb(216,193,19)" fg:x="1" fg:w="459"/><text x="0.4665%" y="1535.50">rust-test`rust_test::main</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1509" width="99.1342%" height="15" fill="rgb(216,135,14)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1519.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1493" width="99.1342%" height="15" fill="rgb(241,47,5)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1503.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1477" width="99.1342%" height="15" fill="rgb(233,42,35)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1487.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1461" width="99.1342%" height="15" fill="rgb(231,13,6)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1471.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1445" width="99.1342%" height="15" fill="rgb(207,181,40)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1455.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1429" width="99.1342%" height="15" fill="rgb(254,173,49)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1439.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1413" width="99.1342%" height="15" fill="rgb(221,1,38)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1423.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1397" width="99.1342%" height="15" fill="rgb(206,124,46)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1407.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1381" width="99.1342%" height="15" fill="rgb(249,21,11)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1391.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1365" width="99.1342%" height="15" fill="rgb(222,201,40)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1375.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1349" width="99.1342%" height="15" fill="rgb(235,61,29)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1359.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1333" width="99.1342%" height="15" fill="rgb(219,207,3)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1343.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1317" width="99.1342%" height="15" fill="rgb(222,56,46)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1327.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1301" width="99.1342%" height="15" fill="rgb(239,76,54)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1311.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1285" width="99.1342%" height="15" fill="rgb(231,124,27)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1295.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1269" width="99.1342%" height="15" fill="rgb(249,195,6)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1279.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1253" width="99.1342%" height="15" fill="rgb(237,174,47)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1263.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1237" width="99.1342%" height="15" fill="rgb(206,201,31)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1247.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1221" width="99.1342%" height="15" fill="rgb(231,57,52)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1231.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1205" width="99.1342%" height="15" fill="rgb(248,177,22)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1215.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1189" width="99.1342%" height="15" fill="rgb(215,211,37)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1199.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1173" width="99.1342%" height="15" fill="rgb(241,128,51)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1183.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1157" width="99.1342%" height="15" fill="rgb(227,165,31)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1167.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1141" width="99.1342%" height="15" fill="rgb(228,167,24)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1151.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1125" width="99.1342%" height="15" fill="rgb(228,143,12)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1135.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1109" width="99.1342%" height="15" fill="rgb(249,149,8)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1119.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1093" width="99.1342%" height="15" fill="rgb(243,35,44)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1103.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1077" width="99.1342%" height="15" fill="rgb(246,89,9)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1087.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1061" width="99.1342%" height="15" fill="rgb(233,213,13)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1071.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1045" width="99.1342%" height="15" fill="rgb(233,141,41)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1055.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1029" width="99.1342%" height="15" fill="rgb(239,167,4)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1039.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="1013" width="99.1342%" height="15" fill="rgb(209,217,16)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1023.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="997" width="99.1342%" height="15" fill="rgb(219,88,35)" fg:x="2" fg:w="458"/><text x="0.6829%" y="1007.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="981" width="99.1342%" height="15" fill="rgb(220,193,23)" fg:x="2" fg:w="458"/><text x="0.6829%" y="991.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="965" width="99.1342%" height="15" fill="rgb(230,90,52)" fg:x="2" fg:w="458"/><text x="0.6829%" y="975.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="949" width="99.1342%" height="15" fill="rgb(252,106,19)" fg:x="2" fg:w="458"/><text x="0.6829%" y="959.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="933" width="99.1342%" height="15" fill="rgb(206,74,20)" fg:x="2" fg:w="458"/><text x="0.6829%" y="943.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (458 samples, 99.13%)</title><rect x="0.4329%" y="917" width="99.1342%" height="15" fill="rgb(230,138,44)" fg:x="2" fg:w="458"/><text x="0.6829%" y="927.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (457 samples, 98.92%)</title><rect x="0.6494%" y="901" width="98.9177%" height="15" fill="rgb(235,182,43)" fg:x="3" fg:w="457"/><text x="0.8994%" y="911.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (457 samples, 98.92%)</title><rect x="0.6494%" y="885" width="98.9177%" height="15" fill="rgb(242,16,51)" fg:x="3" fg:w="457"/><text x="0.8994%" y="895.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (456 samples, 98.70%)</title><rect x="0.8658%" y="869" width="98.7013%" height="15" fill="rgb(248,9,4)" fg:x="4" fg:w="456"/><text x="1.1158%" y="879.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (455 samples, 98.48%)</title><rect x="1.0823%" y="853" width="98.4848%" height="15" fill="rgb(210,31,22)" fg:x="5" fg:w="455"/><text x="1.3323%" y="863.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (453 samples, 98.05%)</title><rect x="1.5152%" y="837" width="98.0519%" height="15" fill="rgb(239,54,39)" fg:x="7" fg:w="453"/><text x="1.7652%" y="847.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (449 samples, 97.19%)</title><rect x="2.3810%" y="821" width="97.1861%" height="15" fill="rgb(230,99,41)" fg:x="11" fg:w="449"/><text x="2.6310%" y="831.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (445 samples, 96.32%)</title><rect x="3.2468%" y="805" width="96.3203%" height="15" fill="rgb(253,106,12)" fg:x="15" fg:w="445"/><text x="3.4968%" y="815.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (442 samples, 95.67%)</title><rect x="3.8961%" y="789" width="95.6710%" height="15" fill="rgb(213,46,41)" fg:x="18" fg:w="442"/><text x="4.1461%" y="799.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (435 samples, 94.16%)</title><rect x="5.4113%" y="773" width="94.1558%" height="15" fill="rgb(215,133,35)" fg:x="25" fg:w="435"/><text x="5.6613%" y="783.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (430 samples, 93.07%)</title><rect x="6.4935%" y="757" width="93.0736%" height="15" fill="rgb(213,28,5)" fg:x="30" fg:w="430"/><text x="6.7435%" y="767.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (422 samples, 91.34%)</title><rect x="8.2251%" y="741" width="91.3420%" height="15" fill="rgb(215,77,49)" fg:x="38" fg:w="422"/><text x="8.4751%" y="751.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (418 samples, 90.48%)</title><rect x="9.0909%" y="725" width="90.4762%" height="15" fill="rgb(248,100,22)" fg:x="42" fg:w="418"/><text x="9.3409%" y="735.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (408 samples, 88.31%)</title><rect x="11.2554%" y="709" width="88.3117%" height="15" fill="rgb(208,67,9)" fg:x="52" fg:w="408"/><text x="11.5054%" y="719.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (404 samples, 87.45%)</title><rect x="12.1212%" y="693" width="87.4459%" height="15" fill="rgb(219,133,21)" fg:x="56" fg:w="404"/><text x="12.3712%" y="703.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (399 samples, 86.36%)</title><rect x="13.2035%" y="677" width="86.3636%" height="15" fill="rgb(246,46,29)" fg:x="61" fg:w="399"/><text x="13.4535%" y="687.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (391 samples, 84.63%)</title><rect x="14.9351%" y="661" width="84.6320%" height="15" fill="rgb(246,185,52)" fg:x="69" fg:w="391"/><text x="15.1851%" y="671.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (384 samples, 83.12%)</title><rect x="16.4502%" y="645" width="83.1169%" height="15" fill="rgb(252,136,11)" fg:x="76" fg:w="384"/><text x="16.7002%" y="655.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (375 samples, 81.17%)</title><rect x="18.3983%" y="629" width="81.1688%" height="15" fill="rgb(219,138,53)" fg:x="85" fg:w="375"/><text x="18.6483%" y="639.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (359 samples, 77.71%)</title><rect x="21.8615%" y="613" width="77.7056%" height="15" fill="rgb(211,51,23)" fg:x="101" fg:w="359"/><text x="22.1115%" y="623.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (353 samples, 76.41%)</title><rect x="23.1602%" y="597" width="76.4069%" height="15" fill="rgb(247,221,28)" fg:x="107" fg:w="353"/><text x="23.4102%" y="607.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (342 samples, 74.03%)</title><rect x="25.5411%" y="581" width="74.0260%" height="15" fill="rgb(251,222,45)" fg:x="118" fg:w="342"/><text x="25.7911%" y="591.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (332 samples, 71.86%)</title><rect x="27.7056%" y="565" width="71.8615%" height="15" fill="rgb(217,162,53)" fg:x="128" fg:w="332"/><text x="27.9556%" y="575.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (322 samples, 69.70%)</title><rect x="29.8701%" y="549" width="69.6970%" height="15" fill="rgb(229,93,14)" fg:x="138" fg:w="322"/><text x="30.1201%" y="559.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (302 samples, 65.37%)</title><rect x="34.1991%" y="533" width="65.3680%" height="15" fill="rgb(209,67,49)" fg:x="158" fg:w="302"/><text x="34.4491%" y="543.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (293 samples, 63.42%)</title><rect x="36.1472%" y="517" width="63.4199%" height="15" fill="rgb(213,87,29)" fg:x="167" fg:w="293"/><text x="36.3972%" y="527.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (275 samples, 59.52%)</title><rect x="40.0433%" y="501" width="59.5238%" height="15" fill="rgb(205,151,52)" fg:x="185" fg:w="275"/><text x="40.2933%" y="511.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (257 samples, 55.63%)</title><rect x="43.9394%" y="485" width="55.6277%" height="15" fill="rgb(253,215,39)" fg:x="203" fg:w="257"/><text x="44.1894%" y="495.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (243 samples, 52.60%)</title><rect x="46.9697%" y="469" width="52.5974%" height="15" fill="rgb(221,220,41)" fg:x="217" fg:w="243"/><text x="47.2197%" y="479.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (226 samples, 48.92%)</title><rect x="50.6494%" y="453" width="48.9177%" height="15" fill="rgb(218,133,21)" fg:x="234" fg:w="226"/><text x="50.8994%" y="463.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (213 samples, 46.10%)</title><rect x="53.4632%" y="437" width="46.1039%" height="15" fill="rgb(221,193,43)" fg:x="247" fg:w="213"/><text x="53.7132%" y="447.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (200 samples, 43.29%)</title><rect x="56.2771%" y="421" width="43.2900%" height="15" fill="rgb(240,128,52)" fg:x="260" fg:w="200"/><text x="56.5271%" y="431.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (180 samples, 38.96%)</title><rect x="60.6061%" y="405" width="38.9610%" height="15" fill="rgb(253,114,12)" fg:x="280" fg:w="180"/><text x="60.8561%" y="415.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (166 samples, 35.93%)</title><rect x="63.6364%" y="389" width="35.9307%" height="15" fill="rgb(215,223,47)" fg:x="294" fg:w="166"/><text x="63.8864%" y="399.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (151 samples, 32.68%)</title><rect x="66.8831%" y="373" width="32.6840%" height="15" fill="rgb(248,225,23)" fg:x="309" fg:w="151"/><text x="67.1331%" y="383.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (132 samples, 28.57%)</title><rect x="70.9957%" y="357" width="28.5714%" height="15" fill="rgb(250,108,0)" fg:x="328" fg:w="132"/><text x="71.2457%" y="367.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (115 samples, 24.89%)</title><rect x="74.6753%" y="341" width="24.8918%" height="15" fill="rgb(228,208,7)" fg:x="345" fg:w="115"/><text x="74.9253%" y="351.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (104 samples, 22.51%)</title><rect x="77.0563%" y="325" width="22.5108%" height="15" fill="rgb(244,45,10)" fg:x="356" fg:w="104"/><text x="77.3063%" y="335.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (91 samples, 19.70%)</title><rect x="79.8701%" y="309" width="19.6970%" height="15" fill="rgb(207,125,25)" fg:x="369" fg:w="91"/><text x="80.1201%" y="319.50">rust-test`rust_test::eval::eval</text></g><g><title>rust-test`rust_test::eval::eval (75 samples, 16.23%)</title><rect x="83.3333%" y="293" width="16.2338%" height="15" fill="rgb(210,195,18)" fg:x="385" fg:w="75"/><text x="83.5833%" y="303.50">rust-test`rust_test::eval..</text></g><g><title>rust-test`rust_test::eval::eval (67 samples, 14.50%)</title><rect x="85.0649%" y="277" width="14.5022%" height="15" fill="rgb(249,80,12)" fg:x="393" fg:w="67"/><text x="85.3149%" y="287.50">rust-test`rust_test::e..</text></g><g><title>rust-test`rust_test::eval::eval (58 samples, 12.55%)</title><rect x="87.0130%" y="261" width="12.5541%" height="15" fill="rgb(221,65,9)" fg:x="402" fg:w="58"/><text x="87.2630%" y="271.50">rust-test`rust_test..</text></g><g><title>rust-test`rust_test::eval::eval (49 samples, 10.61%)</title><rect x="88.9610%" y="245" width="10.6061%" height="15" fill="rgb(235,49,36)" fg:x="411" fg:w="49"/><text x="89.2110%" y="255.50">rust-test`rust_..</text></g><g><title>rust-test`rust_test::eval::eval (39 samples, 8.44%)</title><rect x="91.1255%" y="229" width="8.4416%" height="15" fill="rgb(225,32,20)" fg:x="421" fg:w="39"/><text x="91.3755%" y="239.50">rust-test`ru..</text></g><g><title>rust-test`rust_test::eval::eval (31 samples, 6.71%)</title><rect x="92.8571%" y="213" width="6.7100%" height="15" fill="rgb(215,141,46)" fg:x="429" fg:w="31"/><text x="93.1071%" y="223.50">rust-test..</text></g><g><title>rust-test`rust_test::eval::eval (24 samples, 5.19%)</title><rect x="94.3723%" y="197" width="5.1948%" height="15" fill="rgb(250,160,47)" fg:x="436" fg:w="24"/><text x="94.6223%" y="207.50">rust-t..</text></g><g><title>rust-test`rust_test::eval::eval (20 samples, 4.33%)</title><rect x="95.2381%" y="181" width="4.3290%" height="15" fill="rgb(216,222,40)" fg:x="440" fg:w="20"/><text x="95.4881%" y="191.50">rust-..</text></g><g><title>rust-test`rust_test::eval::eval (19 samples, 4.11%)</title><rect x="95.4545%" y="165" width="4.1126%" height="15" fill="rgb(234,217,39)" fg:x="441" fg:w="19"/><text x="95.7045%" y="175.50">rust..</text></g><g><title>rust-test`rust_test::eval::eval (11 samples, 2.38%)</title><rect x="97.1861%" y="149" width="2.3810%" height="15" fill="rgb(207,178,40)" fg:x="449" fg:w="11"/><text x="97.4361%" y="159.50">ru..</text></g><g><title>rust-test`rust_test::eval::eval (8 samples, 1.73%)</title><rect x="97.8355%" y="133" width="1.7316%" height="15" fill="rgb(221,136,13)" fg:x="452" fg:w="8"/><text x="98.0855%" y="143.50"></text></g><g><title>rust-test`rust_test::eval::eval (6 samples, 1.30%)</title><rect x="98.2684%" y="117" width="1.2987%" height="15" fill="rgb(249,199,10)" fg:x="454" fg:w="6"/><text x="98.5184%" y="127.50"></text></g><g><title>rust-test`rust_test::eval::eval (4 samples, 0.87%)</title><rect x="98.7013%" y="101" width="0.8658%" height="15" fill="rgb(249,222,13)" fg:x="456" fg:w="4"/><text x="98.9513%" y="111.50"></text></g><g><title>rust-test`rust_test::eval::eval (4 samples, 0.87%)</title><rect x="98.7013%" y="85" width="0.8658%" height="15" fill="rgb(244,185,38)" fg:x="456" fg:w="4"/><text x="98.9513%" y="95.50"></text></g><g><title>rust-test`rust_test::eval::eval (3 samples, 0.65%)</title><rect x="98.9177%" y="69" width="0.6494%" height="15" fill="rgb(236,202,9)" fg:x="457" fg:w="3"/><text x="99.1677%" y="79.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.1342%" y="53" width="0.4329%" height="15" fill="rgb(250,229,37)" fg:x="458" fg:w="2"/><text x="99.3842%" y="63.50"></text></g><g><title>rust-test`rust_test::eval::eval (1 samples, 0.22%)</title><rect x="99.3506%" y="37" width="0.2165%" height="15" fill="rgb(206,174,23)" fg:x="459" fg:w="1"/><text x="99.6006%" y="47.50"></text></g><g><title>rust-test`alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="99.5671%" y="69" width="0.2165%" height="15" fill="rgb(211,33,43)" fg:x="460" fg:w="1"/><text x="99.8171%" y="79.50"></text></g><g><title>rust-test`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.22%)</title><rect x="99.5671%" y="53" width="0.2165%" height="15" fill="rgb(245,58,50)" fg:x="460" fg:w="1"/><text x="99.8171%" y="63.50"></text></g><g><title>rust-test`_mi_malloc_generic (1 samples, 0.22%)</title><rect x="99.5671%" y="37" width="0.2165%" height="15" fill="rgb(244,68,36)" fg:x="460" fg:w="1"/><text x="99.8171%" y="47.50"></text></g><g><title>all (462 samples, 100%)</title><rect x="0.0000%" y="1637" width="100.0000%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="462"/><text x="0.2500%" y="1647.50"></text></g><g><title>rust-test`main (2 samples, 0.43%)</title><rect x="99.5671%" y="1621" width="0.4329%" height="15" fill="rgb(254,30,23)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1631.50"></text></g><g><title>rust-test`std::rt::lang_start (2 samples, 0.43%)</title><rect x="99.5671%" y="1605" width="0.4329%" height="15" fill="rgb(235,160,14)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1615.50"></text></g><g><title>rust-test`std::rt::lang_start_internal (2 samples, 0.43%)</title><rect x="99.5671%" y="1589" width="0.4329%" height="15" fill="rgb(212,155,44)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1599.50"></text></g><g><title>rust-test`std::rt::lang_start::_{{closure}} (2 samples, 0.43%)</title><rect x="99.5671%" y="1573" width="0.4329%" height="15" fill="rgb(226,2,50)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1583.50"></text></g><g><title>rust-test`std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.43%)</title><rect x="99.5671%" y="1557" width="0.4329%" height="15" fill="rgb(234,177,6)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1567.50"></text></g><g><title>rust-test`rust_test::main (2 samples, 0.43%)</title><rect x="99.5671%" y="1541" width="0.4329%" height="15" fill="rgb(217,24,9)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1551.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1525" width="0.4329%" height="15" fill="rgb(220,13,46)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1535.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1509" width="0.4329%" height="15" fill="rgb(239,221,27)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1519.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1493" width="0.4329%" height="15" fill="rgb(222,198,25)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1503.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1477" width="0.4329%" height="15" fill="rgb(211,99,13)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1487.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1461" width="0.4329%" height="15" fill="rgb(232,111,31)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1471.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1445" width="0.4329%" height="15" fill="rgb(245,82,37)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1455.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1429" width="0.4329%" height="15" fill="rgb(227,149,46)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1439.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1413" width="0.4329%" height="15" fill="rgb(218,36,50)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1423.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1397" width="0.4329%" height="15" fill="rgb(226,80,48)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1407.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1381" width="0.4329%" height="15" fill="rgb(238,224,15)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1391.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1365" width="0.4329%" height="15" fill="rgb(241,136,10)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1375.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1349" width="0.4329%" height="15" fill="rgb(208,32,45)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1359.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1333" width="0.4329%" height="15" fill="rgb(207,135,9)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1343.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1317" width="0.4329%" height="15" fill="rgb(206,86,44)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1327.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1301" width="0.4329%" height="15" fill="rgb(245,177,15)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1311.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1285" width="0.4329%" height="15" fill="rgb(206,64,50)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1295.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1269" width="0.4329%" height="15" fill="rgb(234,36,40)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1279.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1253" width="0.4329%" height="15" fill="rgb(213,64,8)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1263.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1237" width="0.4329%" height="15" fill="rgb(210,75,36)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1247.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1221" width="0.4329%" height="15" fill="rgb(229,88,21)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1231.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1205" width="0.4329%" height="15" fill="rgb(252,204,47)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1215.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1189" width="0.4329%" height="15" fill="rgb(208,77,27)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1199.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1173" width="0.4329%" height="15" fill="rgb(221,76,26)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1183.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1157" width="0.4329%" height="15" fill="rgb(225,139,18)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1167.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1141" width="0.4329%" height="15" fill="rgb(230,137,11)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1151.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1125" width="0.4329%" height="15" fill="rgb(212,28,1)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1135.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1109" width="0.4329%" height="15" fill="rgb(248,164,17)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1119.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1093" width="0.4329%" height="15" fill="rgb(222,171,42)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1103.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1077" width="0.4329%" height="15" fill="rgb(243,84,45)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1087.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1061" width="0.4329%" height="15" fill="rgb(252,49,23)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1071.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1045" width="0.4329%" height="15" fill="rgb(215,19,7)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1055.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1029" width="0.4329%" height="15" fill="rgb(238,81,41)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1039.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="1013" width="0.4329%" height="15" fill="rgb(210,199,37)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1023.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="997" width="0.4329%" height="15" fill="rgb(244,192,49)" fg:x="460" fg:w="2"/><text x="99.8171%" y="1007.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="981" width="0.4329%" height="15" fill="rgb(226,211,11)" fg:x="460" fg:w="2"/><text x="99.8171%" y="991.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="965" width="0.4329%" height="15" fill="rgb(236,162,54)" fg:x="460" fg:w="2"/><text x="99.8171%" y="975.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="949" width="0.4329%" height="15" fill="rgb(220,229,9)" fg:x="460" fg:w="2"/><text x="99.8171%" y="959.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="933" width="0.4329%" height="15" fill="rgb(250,87,22)" fg:x="460" fg:w="2"/><text x="99.8171%" y="943.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="917" width="0.4329%" height="15" fill="rgb(239,43,17)" fg:x="460" fg:w="2"/><text x="99.8171%" y="927.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="901" width="0.4329%" height="15" fill="rgb(231,177,25)" fg:x="460" fg:w="2"/><text x="99.8171%" y="911.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="885" width="0.4329%" height="15" fill="rgb(219,179,1)" fg:x="460" fg:w="2"/><text x="99.8171%" y="895.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="869" width="0.4329%" height="15" fill="rgb(238,219,53)" fg:x="460" fg:w="2"/><text x="99.8171%" y="879.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="853" width="0.4329%" height="15" fill="rgb(232,167,36)" fg:x="460" fg:w="2"/><text x="99.8171%" y="863.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="837" width="0.4329%" height="15" fill="rgb(244,19,51)" fg:x="460" fg:w="2"/><text x="99.8171%" y="847.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="821" width="0.4329%" height="15" fill="rgb(224,6,22)" fg:x="460" fg:w="2"/><text x="99.8171%" y="831.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="805" width="0.4329%" height="15" fill="rgb(224,145,5)" fg:x="460" fg:w="2"/><text x="99.8171%" y="815.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="789" width="0.4329%" height="15" fill="rgb(234,130,49)" fg:x="460" fg:w="2"/><text x="99.8171%" y="799.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="773" width="0.4329%" height="15" fill="rgb(254,6,2)" fg:x="460" fg:w="2"/><text x="99.8171%" y="783.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="757" width="0.4329%" height="15" fill="rgb(208,96,46)" fg:x="460" fg:w="2"/><text x="99.8171%" y="767.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="741" width="0.4329%" height="15" fill="rgb(239,3,39)" fg:x="460" fg:w="2"/><text x="99.8171%" y="751.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="725" width="0.4329%" height="15" fill="rgb(233,210,1)" fg:x="460" fg:w="2"/><text x="99.8171%" y="735.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="709" width="0.4329%" height="15" fill="rgb(244,137,37)" fg:x="460" fg:w="2"/><text x="99.8171%" y="719.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="693" width="0.4329%" height="15" fill="rgb(240,136,2)" fg:x="460" fg:w="2"/><text x="99.8171%" y="703.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="677" width="0.4329%" height="15" fill="rgb(239,18,37)" fg:x="460" fg:w="2"/><text x="99.8171%" y="687.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="661" width="0.4329%" height="15" fill="rgb(218,185,22)" fg:x="460" fg:w="2"/><text x="99.8171%" y="671.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="645" width="0.4329%" height="15" fill="rgb(225,218,4)" fg:x="460" fg:w="2"/><text x="99.8171%" y="655.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="629" width="0.4329%" height="15" fill="rgb(230,182,32)" fg:x="460" fg:w="2"/><text x="99.8171%" y="639.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="613" width="0.4329%" height="15" fill="rgb(242,56,43)" fg:x="460" fg:w="2"/><text x="99.8171%" y="623.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="597" width="0.4329%" height="15" fill="rgb(233,99,24)" fg:x="460" fg:w="2"/><text x="99.8171%" y="607.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="581" width="0.4329%" height="15" fill="rgb(234,209,42)" fg:x="460" fg:w="2"/><text x="99.8171%" y="591.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="565" width="0.4329%" height="15" fill="rgb(227,7,12)" fg:x="460" fg:w="2"/><text x="99.8171%" y="575.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="549" width="0.4329%" height="15" fill="rgb(245,203,43)" fg:x="460" fg:w="2"/><text x="99.8171%" y="559.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="533" width="0.4329%" height="15" fill="rgb(238,205,33)" fg:x="460" fg:w="2"/><text x="99.8171%" y="543.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="517" width="0.4329%" height="15" fill="rgb(231,56,7)" fg:x="460" fg:w="2"/><text x="99.8171%" y="527.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="501" width="0.4329%" height="15" fill="rgb(244,186,29)" fg:x="460" fg:w="2"/><text x="99.8171%" y="511.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="485" width="0.4329%" height="15" fill="rgb(234,111,31)" fg:x="460" fg:w="2"/><text x="99.8171%" y="495.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="469" width="0.4329%" height="15" fill="rgb(241,149,10)" fg:x="460" fg:w="2"/><text x="99.8171%" y="479.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="453" width="0.4329%" height="15" fill="rgb(249,206,44)" fg:x="460" fg:w="2"/><text x="99.8171%" y="463.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="437" width="0.4329%" height="15" fill="rgb(251,153,30)" fg:x="460" fg:w="2"/><text x="99.8171%" y="447.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="421" width="0.4329%" height="15" fill="rgb(239,152,38)" fg:x="460" fg:w="2"/><text x="99.8171%" y="431.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="405" width="0.4329%" height="15" fill="rgb(249,139,47)" fg:x="460" fg:w="2"/><text x="99.8171%" y="415.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="389" width="0.4329%" height="15" fill="rgb(244,64,35)" fg:x="460" fg:w="2"/><text x="99.8171%" y="399.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="373" width="0.4329%" height="15" fill="rgb(216,46,15)" fg:x="460" fg:w="2"/><text x="99.8171%" y="383.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="357" width="0.4329%" height="15" fill="rgb(250,74,19)" fg:x="460" fg:w="2"/><text x="99.8171%" y="367.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="341" width="0.4329%" height="15" fill="rgb(249,42,33)" fg:x="460" fg:w="2"/><text x="99.8171%" y="351.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="325" width="0.4329%" height="15" fill="rgb(242,149,17)" fg:x="460" fg:w="2"/><text x="99.8171%" y="335.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="309" width="0.4329%" height="15" fill="rgb(244,29,21)" fg:x="460" fg:w="2"/><text x="99.8171%" y="319.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="293" width="0.4329%" height="15" fill="rgb(220,130,37)" fg:x="460" fg:w="2"/><text x="99.8171%" y="303.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="277" width="0.4329%" height="15" fill="rgb(211,67,2)" fg:x="460" fg:w="2"/><text x="99.8171%" y="287.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="261" width="0.4329%" height="15" fill="rgb(235,68,52)" fg:x="460" fg:w="2"/><text x="99.8171%" y="271.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="245" width="0.4329%" height="15" fill="rgb(246,142,3)" fg:x="460" fg:w="2"/><text x="99.8171%" y="255.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="229" width="0.4329%" height="15" fill="rgb(241,25,7)" fg:x="460" fg:w="2"/><text x="99.8171%" y="239.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="213" width="0.4329%" height="15" fill="rgb(242,119,39)" fg:x="460" fg:w="2"/><text x="99.8171%" y="223.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="197" width="0.4329%" height="15" fill="rgb(241,98,45)" fg:x="460" fg:w="2"/><text x="99.8171%" y="207.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="181" width="0.4329%" height="15" fill="rgb(254,28,30)" fg:x="460" fg:w="2"/><text x="99.8171%" y="191.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="165" width="0.4329%" height="15" fill="rgb(241,142,54)" fg:x="460" fg:w="2"/><text x="99.8171%" y="175.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="149" width="0.4329%" height="15" fill="rgb(222,85,15)" fg:x="460" fg:w="2"/><text x="99.8171%" y="159.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="133" width="0.4329%" height="15" fill="rgb(210,85,47)" fg:x="460" fg:w="2"/><text x="99.8171%" y="143.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="117" width="0.4329%" height="15" fill="rgb(224,206,25)" fg:x="460" fg:w="2"/><text x="99.8171%" y="127.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="101" width="0.4329%" height="15" fill="rgb(243,201,19)" fg:x="460" fg:w="2"/><text x="99.8171%" y="111.50"></text></g><g><title>rust-test`rust_test::eval::eval (2 samples, 0.43%)</title><rect x="99.5671%" y="85" width="0.4329%" height="15" fill="rgb(236,59,4)" fg:x="460" fg:w="2"/><text x="99.8171%" y="95.50"></text></g><g><title>rust-test`rust_test::eval::eval (1 samples, 0.22%)</title><rect x="99.7835%" y="69" width="0.2165%" height="15" fill="rgb(254,179,45)" fg:x="461" fg:w="1"/><text x="100.0335%" y="79.50"></text></g><g><title>rust-test`rust_test::eval::eval (1 samples, 0.22%)</title><rect x="99.7835%" y="53" width="0.2165%" height="15" fill="rgb(226,14,10)" fg:x="461" fg:w="1"/><text x="100.0335%" y="63.50"></text></g><g><title>rust-test`rust_test::eval::eval (1 samples, 0.22%)</title><rect x="99.7835%" y="37" width="0.2165%" height="15" fill="rgb(244,27,41)" fg:x="461" fg:w="1"/><text x="100.0335%" y="47.50"></text></g></svg></svg>